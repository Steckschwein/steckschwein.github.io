<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My New Hugo Site</title><link>https://steckschwein.github.io/</link><description>Recent content on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 03 Jul 2022 21:08:19 +0200</lastBuildDate><atom:link href="https://steckschwein.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello</title><link>https://steckschwein.github.io/posts/hello/</link><pubDate>Sun, 03 Jul 2022 21:08:19 +0200</pubDate><guid>https://steckschwein.github.io/posts/hello/</guid><description/></item><item><title>Joysticks and user port</title><link>https://steckschwein.github.io/joysticks-and-user-port/</link><pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/joysticks-and-user-port/</guid><description>Since after using all of VIA Port B for SPI, all we have left is Port A to hook up anything else. One of our design goals is to be able to hook up two Atari/Commodore style joysticks. With only one 8bit IO port left, this is a bit tricky. Our first approach was to wire up the joysticks in a matrix like arrangement, but this suffered from the infamous matrix ghosting problem.</description></item><item><title>Yamaha V9958/YM3812 Video/Audio Board</title><link>https://steckschwein.github.io/v9958-video-board/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/v9958-video-board/</guid><description>Our current audio/video board is based on the Yamaha V9958. The V9958 is the successor of the V9938, which in turn is the successor to our TMS9929/9918, which has served our project for quite some time. But it is hard to ignore what the V9958 has to offer (80 column text mode to begin with), so we decided to use it as the first major upgrade to the Steckschwein Hardware specs in a couple of years.</description></item><item><title>Software</title><link>https://steckschwein.github.io/software/</link><pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/software/</guid><description>Repositories One can find the complete sources for BIOS, SteckOS, Firmware for the keyboard controller, decoder sources of the GAL&amp;rsquo;s and full schematics and board layouts as KiCad-projects at bitbucket.org
All software (steckOS, BIOS, libraries, tools, games, stuff): https://bitbucket.org/steckschwein/steckschwein-code
Hardware (Schematics, PCB Layouts): https://bitbucket.org/steckschwein/steckschwein-hardware
Steckschwein Emulator: https://github.com/twoinke/steckschwein-emulator
Tools We almost exclusively use Open Source-Software to design and code for the Steckschwein.
cc65 - http://cc65.github.io/cc65/ Extensive suite of cross development tools for almost every 6502 based platform.</description></item><item><title>Impressum</title><link>https://steckschwein.github.io/impressum/</link><pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/impressum/</guid><description>Impressum Angaben gemäß § 5 TMG: Thomas Woinke Schüleinstraße 4 81673 München
Marko Lauke
Gräfin-Dönhoff-Straße 16
83024 Rosenheim
Kontakt E-Mail: info (at) steckschwein.de
Fax: +49 3212 115 8877
Distanzierung Mit Urteil vom 12. Mai 1998 hat das Landgericht Hamburg entschieden, dass man durch die Ausbringung eines Links die Inhalte der gelinkten Seite ggf. mit zu verantworten hat. Dies kann - so das Landgericht - nur dadurch verhindert werden, dass man sich ausdrücklich von diesen Inhalten distanziert.</description></item><item><title>CPU-Board</title><link>https://steckschwein.github.io/cpuramdecoder/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/cpuramdecoder/</guid><description>The CPU boards carries the main CPU 65c02, 64k RAM organized in two 32k * 8 SRAM chips (62256). We decided to use SRAM just because it&amp;rsquo;s much simpler to use than DRAM as we do not need a DRAM conroller. Also, small SRAM chips are also pretty easy to come by and also rather cheap. The ROM is a 28c256 EEPROM, which is banked in at $e000 in 8k steps.</description></item><item><title>Hardware</title><link>https://steckschwein.github.io/hardware/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/hardware/</guid><description>It it&amp;rsquo;s current incarnation, the Steckschwein consists of 4 main units:
CPU/Memory IO (VIA 65c22), now also including UART SPI-Devices UART 16550 Joysticks and user port Video / audio board with V9958 VDP and YM3812 (OPL2) sound chip The 62c22 VIA is mainly utilized as SPI master to implement SPI as the main peripheral bus, connecting SD-card, RTC and the ATmega8 (used as PS/2 controller) to the system. The block diagram shows how things are working together.</description></item><item><title>IO: VIA 65c22 as SPI-Master</title><link>https://steckschwein.github.io/via-65c22-as-spi-master/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/via-65c22-as-spi-master/</guid><description>One of the fundamental design decisions when creating the Steckschwein was to use SPI as the main peripheral bus. This way, various different devices can be utilized using a single interface protocol. The main killer feature for using SPI was to be able to use an SD card as mass storage. This gives us mass storage with almost no extra hardware effort, only level conversion is needed between the system (5V) and the card (3.</description></item><item><title>SPI-Devices</title><link>https://steckschwein.github.io/spi-devices/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/spi-devices/</guid><description>SD-Card as really cheap and lazy mass storage Most important device on the Steckschwein using the SPI-Bus and therefore the &amp;ldquo;killer application&amp;rdquo;, that sold the idea of using SPI to us, is the sd card. The only additional hardware effort was to level shift the signals from and to the sd-card, as it runs on 3.3V while the Steckschwein uses 5V. To accomplish this, the SPI clock, SPI slave select and MOSI are converted using a 74LS07, with it&amp;rsquo;s open collector outputs pulled up to 3.</description></item><item><title>The Project</title><link>https://steckschwein.github.io/home/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/home/</guid><description>These are times where one just gets bombed with gigahertz, gigabytes. The Steckschwein is an 8bit computer that wants to show how much know how is already to be found in a rather simple computer.
Our mission is to create a computer that might have existed during the heyday of 8bit home computers. Only with more modern interfaces to the outside world, since nobody wants to fiddle with floppy disks anymore.</description></item><item><title>UART 16550</title><link>https://steckschwein.github.io/uart-16550/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://steckschwein.github.io/uart-16550/</guid><description>The 16550 UART was the first chip to be attached to the CPU bus that does not have a native 65xx bus interface and hence needed a little more effort. The reset and interrupt signals are active high, while the 6502 needs them to be active low. So reset needed to be inverted, and interrupt is driven through a 74LS06 inverter driver with open collector outputs in order to be able to be wire-ORed to the system interrupt line.</description></item></channel></rss>