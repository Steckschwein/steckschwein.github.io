<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Steckschwein</title><link>https://www.steckschwein.de/</link><description>Recent content on Steckschwein</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 04 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.steckschwein.de/index.xml" rel="self" type="application/rss+xml"/><item><title>Niklaus Wirth 15.2.1934 – 1.1.2024</title><link>https://www.steckschwein.de/post/rip-niklaus-wirth/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/rip-niklaus-wirth/</guid><description>Niklaus Wirth has died on 1.1.2024 at the age of 89. Known to most as the creator of the programming language Pascal, Wirth was also primary designer of the programming languages Euler, PL360, ALGOL W, Modula, Modula-2 and Oberon, heavily influencing coming languages and the paradigm of object oriented programming, and programming methodology altogether. Furthermore, he led the team designing the Lilith workstation, a graphical workstation with a bitmapped graphical display, heavily influenced by the Xerox Alto.</description></item><item><title>10 Years</title><link>https://www.steckschwein.de/post/10-years/</link><pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/10-years/</guid><description>In order to fill the void in the days between Christmas and New Year&amp;rsquo;s Eve 2013, we began experimenting with a 65C02 on a breadboard. This little experiment would later evolve into an actually working 8bit computer. 10 years and some significant amount of focus creep later we had build this cool little 8bit machine with the specifications found here.
The amount of new stuff to learn to design a new computer out of &amp;ldquo;old&amp;rdquo; or &amp;ldquo;retro&amp;rdquo; components was massive.</description></item><item><title>Saving ASCII sources in EhBasic</title><link>https://www.steckschwein.de/post/ascii_save_ehbasic/</link><pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/ascii_save_ehbasic/</guid><description>Our FAT32 driver now supports byte-wise writing of a file. Reason enough to continue reworking the file handling of our EhBasic port that we started here to finally having the SAVE command write ASCII source files.
The basic idea is to open a file, redirect the EhBasic output vector to our new kernel call &amp;ldquo;krn_write_byte&amp;rdquo;, then trigger the LIST command internally. The listing being output by LIST will then be written to the opened file instead the screen.</description></item><item><title>VCFb 2023</title><link>https://www.steckschwein.de/post/vcfb-2023/</link><pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/vcfb-2023/</guid><description>For reasons mostly related to the pandemic, we did not attend VCFb since 2019. Finally, this year we managed to be there again, just im time to show our newly assembled rev0.6 (and fully working !!!) SBC boards around, and have tons of fun with other very nice people there (Hello https://mega65.org/!). Also, we talked about how the Steckschwein evolved over the last almost 10 years and about our development methodology.</description></item><item><title>SBC - Revision 0.6</title><link>https://www.steckschwein.de/post/sbc_revision_0.6/</link><pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/sbc_revision_0.6/</guid><description>After some troubleshooting, we finally finished Revision 0.6 of our boards, and the new boards are finally there, ready to be assembled. We managed to fix all the issues we found, and also did some cleaning up, used better footprints for the resistors and the mini DIN jacks.
Soldering session coming up..
Revision 0.6 boards are there</description></item><item><title>SBC - troubleshooting</title><link>https://www.steckschwein.de/post/sbc-troubleshooting/</link><pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/sbc-troubleshooting/</guid><description>Our debugging journey at VCFe began right at powering up the board the first time, when something got real hot real fast. Fair enough, and easy to spot. There was a mixup of VCC and GND at U29, a 74HCT244. Embarassing, but not that critical, as U29 is only used to connect the joystick ports to Port A of the VIA. We can live without them for now. The mixup likely happened when I transferred the IO-board schematics from KiCad 6 to 7 while updating the symbols from the current library, which happened to be different than the old ones.</description></item><item><title>It's alive - sort of</title><link>https://www.steckschwein.de/post/its-alive-sort-of/</link><pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/its-alive-sort-of/</guid><description>Our plan for VCF2 22.0 was to assemble the first Steckschwein SBC right at our booth as some kind of show-cooking event. That only half worked, as this quickly turned into show-debugging instead of show-cooking. It was only just right before the end of VCFe 22.0, just before we had to pack everything up, we managed to get the SBC to talk to us via serial:
It‘s alive. Sort of. pic.</description></item><item><title>New boards are here!</title><link>https://www.steckschwein.de/post/new-boards-are-here/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/new-boards-are-here/</guid><description>Just in time for VCFe 22.0 our new SBC boards have arrived!
Be there at VCFe, when we are assembling the new Steckschwein SBC and have a few beers with us!
Save the date(s): 29.4. - 1.5.2023
ESV München OST, now at Hermann-Weinhauser-Straße 7 81673 München
Check it out: https://vcfe.org/</description></item><item><title>VCFe 22.0</title><link>https://www.steckschwein.de/post/vcfe-22/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/vcfe-22/</guid><description>Looks like the upcoming VCFe 22.0 will be a feast for the 6502-connoisseur: Andre Fachat will show his MicroPET and his 6502 multitasking operating system &amp;ldquo;GeckOS&amp;rdquo;, Armin Hierstetter will show an authentic Apple I replica, and of course we will be there, too, showing our new banking schema and our emulator.
Save the date(s): 29.4. - 1.5.2023
We really are looking forward to a glorious VCFe, which will also be back at the new old location, the sports hall of the ESV München OST, now at</description></item><item><title>It's a Long Way to the Memory Top, Part II</title><link>https://www.steckschwein.de/post/its-a-long-way-to-the-memory-top-ii/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/its-a-long-way-to-the-memory-top-ii/</guid><description>This one really is a tough one to debug. At first, we suspected the VHDL code for the CPLD as the main error source, as VHDL is not our strongest suit. In fact, the decoder/banking logic is the first thing we ever really did in VHDL (apart from a few simple decoder equations the first days we were playing with GALs).
As it turned out, the VHDL was not the main problem.</description></item><item><title>It's a Long Way to the Memory Top</title><link>https://www.steckschwein.de/post/its-a-long-way-to-the-memory-top/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/its-a-long-way-to-the-memory-top/</guid><description>In preparation for the build of our new CPU-Board, we purchased two WDC 65c02 in PLCC44 package from some eBay vendor. On arrival, the first interesting thing is the way they were packaged. No anti esd packaging, only a plastic bag, which we found sketchy enough to post on Twitter.
Next, WDC reacted to that tweet, stating that these might be not genuine or be at least very old.
So much for ESD safe packaging pic.</description></item><item><title>512k Ought to Be Enough for Anybody</title><link>https://www.steckschwein.de/post/512k-ought-to-be-enough-for-anybody/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/512k-ought-to-be-enough-for-anybody/</guid><description>The biggest limitation of any 8 bit CPU such as our beloved 65C02 is the amount of memory that the CPU can address. With 16 address lines, the addressable memory is maxed out at 64k. All ROM and RAM has to be crammed into there. With the 6502 being a memory mapped architecture, IO devices need their addresses there, too.
In order to expand the amount of usable memory, some trickery is necessary.</description></item><item><title>Fixing PS/2 Keyboard handling (Part I)</title><link>https://www.steckschwein.de/post/fixing-ps-2-keyboard-handling-part-i/</link><pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/fixing-ps-2-keyboard-handling-part-i/</guid><description>The way the PS/2 keyboard is handled has always been something we were never quite happy with. The key points being:
The PS/2 controller had no way of signalling that there has been a new keystroke, the buffer had to be polled via SPI. The PS/2 controller had no way of talking to the keyboard and had to rely for the keyboard to initialize itself properly. Also, typematic rate and delay could not be set, as couldn&amp;rsquo;t the states of the keyboard LEDs.</description></item><item><title>Connecting SNES Controller to the Steckschwein</title><link>https://www.steckschwein.de/post/connecting-snes-controller-to-the-steckschwein/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/connecting-snes-controller-to-the-steckschwein/</guid><description>Recently, Michael Steil published a blog post about connecting NES and SNES Controller to a 6502-based system showing how to use NES and SNES controllers on a C64 without the need for any special hardware, by just connecting them to the C64&amp;rsquo;s user port.
Why not use his approach and adapt it to the Steckschwein? The Steckschwein has a User Port, too, albeit a very different one as the C64. Basically, the Steckschwein-User-Port consists of the complete Port A of the VIA, plus the /RESET and /IRQ lines.</description></item><item><title>Chuck Peddle, 1937 - 2019</title><link>https://www.steckschwein.de/post/chuck-peddle-1937-2019/</link><pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/chuck-peddle-1937-2019/</guid><description>Chuck Peddle, the main designer of the 6502, has passed away on Dec. 15th, 2019.
Peddle was one of the engineers that developed the 6800 at Motorola. He later went to MOS in order to implement his vision of an 8bit CPU for way less than $300, which was Motorola&amp;rsquo;s price for the 6800.
This idea of a cheap but powerful CPU materialized as the 6501, and finally the 6502. That very chip, which started the microcomputer revolution, and on which both Marko and myself began to write our first code ever at an early age.</description></item><item><title>Steckschwein emulator</title><link>https://www.steckschwein.de/post/steckschwein-emulator/</link><pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/steckschwein-emulator/</guid><description>Back from the VCFB (Vintage Computer Festival Berlin) 2019 where we had good talks, met interesting people and got new ideas. Especially from Michael Steil who just asked the simple question &amp;ldquo;How you can develop software for the Steckschwein without an emulator?&amp;rdquo;
With the answer in my mind I felt a little annoyed and also &amp;ldquo;triggered&amp;rdquo; at the same time&amp;hellip; However, Michael Steil was nice enough to strip down his Commander X16-Emulator into a barebone 65c02 computer emulator, so all we had to do was to implement our memory map (easy) and borrow a V9958 video chip implementation from blueMSX and implement it into the emulator (hard).</description></item><item><title>Markos Pacman Talk at VCFb</title><link>https://www.steckschwein.de/post/markos-pacman-talk-at-vcfb/</link><pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/markos-pacman-talk-at-vcfb/</guid><description>Marko talked about his Pacman port to the Steckschwein at VCFb. Basically it&amp;rsquo;s the same talk he did at VCFe in April, but this time, there&amp;rsquo;s a video. Enjoy!
https://media.ccc.de/v/vcfb19_-_111_-_de_-_201910121615_-_pac-man_auf_dem_steckschwein_-_marko_lauke</description></item><item><title>Weird bug in SD card code</title><link>https://www.steckschwein.de/post/weird-bug-in-sd-card-code/</link><pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/weird-bug-in-sd-card-code/</guid><description>Frank van den Hoef, who is adapting the Steckschwein SPI &amp;amp; FAT32 code for his tiny65 machine made me aware of a classic mistake for a 6502 assembly coder to make. Namely in our sdcard driver, when waiting for the &amp;ldquo;proper&amp;rdquo; response from the card (which should have bit 7 cleared). The routine handling this looked like this:
1 sd_cmd_response_wait: 2 ldy #sd_cmd_response_retries 3 @l:	dey 4 beq sd_block_cmd_timeout ; y already 0?</description></item><item><title>Forth Benchmarks</title><link>https://www.steckschwein.de/post/forth-benchmarks/</link><pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/forth-benchmarks/</guid><description>The main motivation to get Forth up and running on the Steckschwein was to participate at The Ultimate Benchmark, in order to crush all 8bit competition to dust.
So the plan was to benchmark the Steckschwein live at the VCFe. Unfortunately, Carsten could not be there, so no Forth benchmark competition this year. Recently, Carsten presented his benchmark results using TaliForth2, which led us to run the same benchmarks he did and send the results to Carsten, who was kind enough to include them on his site:</description></item><item><title>NVRAM improvements</title><link>https://www.steckschwein.de/post/nvram-improvements/</link><pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/nvram-improvements/</guid><description>As real computer is not a real computer without a real time clock, the Steckschwein is no exception here. As we know, we use the Maxim DS1306 RTC, which is a very common RTC which comes as DIP IC and has an SPI interface. And of course it supports battery backup in various configurations. And this is where things get interesting.
Apart from timekeeping, the DS1306 also has 96 bytes of battery buffered RAM.</description></item><item><title>Fixing the white screen problem on a Tekway DST1062B oscilloscope</title><link>https://www.steckschwein.de/post/fixing-the-white-screen-problem-on-a-tekway-dst1062b-oscilloscope/</link><pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/fixing-the-white-screen-problem-on-a-tekway-dst1062b-oscilloscope/</guid><description>The Tekway DST 1062B (also known unter the Hantek or Voltcraft brand) is an inexpensive 60MHz digital storage oscilloscope, which is very much hackable and has proven to be worth its weight in gold pressed latinum.
More recently, my scope became affected by the infamous white screen problem, which apparently is a problem quite common to this model and its 100MHz or 200MHz siblings.
The Tekway/Hantek white screen of death</description></item><item><title>V9958+OPL2-Boards are there</title><link>https://www.steckschwein.de/post/v9958opl2-boards-are-there/</link><pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/v9958opl2-boards-are-there/</guid><description>The newly made boards made their way from China to Munich. Starting now, the multi board version of the Steckschwein is made up of 3 Boards: CPU/Memory, IO/UART and V9958-OPL2.</description></item><item><title>New V9958-Board with integrated OPL2</title><link>https://www.steckschwein.de/post/new-v9958-board-with-integrated-opl2/</link><pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/new-v9958-board-with-integrated-opl2/</guid><description>It&amp;rsquo;s time for another hardware upgrade. Since we really want to get our single board Steckschwein done, we are going for higher integration of our multiboard prototype. After integrating the UART to the IO-Board, we integrate the OPL2 sound part onto the V9958 video board, so the current Steckschwein multi board incarnations are reduced to three boards. We did postpone our plan to upgrade sound to OPL3 because Daniel Illgen, which we met at VCFb, convinced us with some awesome OPL2 tunes that OPL2 is still cool.</description></item><item><title>V9958 - "The WAIT" - investigation of the CPU/VDP /WAIT interface</title><link>https://www.steckschwein.de/post/v9958-the-wait-investigation-of-the-cpu-vdp-wait-interface/</link><pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/v9958-the-wait-investigation-of-the-cpu-vdp-wait-interface/</guid><description>&amp;hellip; on the way back to munich, we had some time to do a little code review of our gfx library. thinking about the cpu to video chip timings and again read the well known datasheets of the V9938/V9958. suddenly i got an enlightenment and we came to the following conclusion.
as described in the datasheet (V9958-Technical-manual_v1.0.pdf) of the V9958 there are different timings given for different kind of writes. so as far as we understand there are the following timings</description></item><item><title>WOZMON - a memory monitor in 256 bytes</title><link>https://www.steckschwein.de/post/wozmon-a-memory-monitor-in-256-bytes/</link><pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/wozmon-a-memory-monitor-in-256-bytes/</guid><description>The woz monitor, also known as WOZMON, is a pretty simple memory monitor and was the system software located in the 256 byte PROM on the Apple I. Wozmon is used to inspect and modify memory contents or to execute programs already located in memory. Steve Wozniak managed to squeeze all that functionality into 256 bytes. That&amp;rsquo;s right, bytes. Not megabytes, not kilobytes. Bytes.
We already had attempted to get wozmon ported to our Steckschwein, but we did not succeed so far.</description></item><item><title>Switching to english</title><link>https://www.steckschwein.de/post/switching-to-english/</link><pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/switching-to-english/</guid><description>There seems to be quite some interest in our little project from outside of germany. Thanks to all who are following what we are doing.
To save you the effort of putting our blatherings through Google Translate or even having to learn german, we decided switch to writing our blog articles in english.
The rest of the site will be translated as we go. The hardware page has already been translated.</description></item><item><title>V9958 - Es ist vollbracht</title><link>https://www.steckschwein.de/post/v9958-es-ist-vollbracht/</link><pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/v9958-es-ist-vollbracht/</guid><description>Da ist sie nun, die neuen Videoplatine. Nach einigen Umwegen hat der Packen Boards uns erreicht (die erste Lieferung ist versehentlich in Spanien gelandet, während wir die Platinen des spanischen Bastlers erhalten haben. Inzwischen hat jeder Ersatz erhalten).
Wir haben ja bekanntlich unsere Vorgehensweise geändert, indem wir schneller Platinen anfertigen lassen. Aber zu unserer großen Freude funktionierte die erste Platine nach Bestückung auf Anhieb. Selbstverständlich haben sich aber auch ein paar Patzer eingeschlichen.</description></item><item><title>V9958 - Vom Steckbrett zum Prototypen</title><link>https://www.steckschwein.de/post/v9958-vom-steckbrett-zum-prototypen/</link><pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/v9958-vom-steckbrett-zum-prototypen/</guid><description>Es ist soweit, der erste Prototyp auf Platine von unserem neuen V9958-Videoboard ist fertig layoutet, und die Platinen warten beim Fertiger auf ihren Versand.
Der Steckbrettaufbau vom letzten Post wurde auf 128k erweitert. Dazu ist einfach eine 2. Bank von 2 Stück 64k x 4 DRAMS dazugebaut worden. Damit entspricht der Aufbau unserem Schaltplan, und dieser ist damit getestet.
Unsere Timing-Probleme führen wir auf zu kurze Delays bei Registerzugriffen, ein Softwareproblem also, zurück.</description></item><item><title>Es wird wieder gesteckt</title><link>https://www.steckschwein.de/post/es-wird-wieder-gesteckt/</link><pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/es-wird-wieder-gesteckt/</guid><description>Wir haben uns schon länger ein Upgrade des Videochips des Steckschweins vorgenommen. Der TMS9929 ist ein netter Chip, aber an einem 8MHz-65c02, der dazu noch so coole Hardware-Features hat, fühlt er sich ein bisschen wie die Achillesferse an.
Zum Glück war beim TMS9929 nicht Schluss, denn dieser hat im Laufe der Zeit diverse Nachfolger bekommen, welche von Yamaha hergestellt wurden und in diversen Weiterentwicklungen des MSX-Standards Verwendung fanden.
Der direkte Nachfolger der TMS99xx-Reihe ist der V9938.</description></item><item><title>Neue Hardware - die Platinen sind da</title><link>https://www.steckschwein.de/post/neue-hardware-die-platinen-sind-da/</link><pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/neue-hardware-die-platinen-sind-da/</guid><description>Die neuen IO-Platinen mit integriertem UART sind fertig und haben ihren Weg von China nach München gefunden.
Mit dem neuen Layout hat es nicht nur der UART mit aufs IO-Board geschafft, es sind auch etliche kleinere und größere Verbesserungen eingeflossen:
Die Joystickports wurden komplett neu designed. Die Optokoppler sparen wir uns, stattdessen wählen wir über einen VIA Pin verschiedene Treiber an, die den gewünschten Joystickport mit VIA Port A verbindet. Die Ports lassen sich auch per Software komplett abschalten, damit der User-Port frei verfügbar ist.</description></item><item><title>Mal wieder neue Hardware</title><link>https://www.steckschwein.de/post/mal-wieder-neue-hardware/</link><pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/mal-wieder-neue-hardware/</guid><description>Die Zeit ist reif für ein Hardware-Update, und zwar für die IO-Platine 2.0. Vorgesehen war ja schon länger, den UART dort zu integrieren. Ausserdem war das Joystick&amp;ndash;Interface noch unausgegoren, sodass auch hier etwas Neues entwickelt wurde.
Zum Schutz der VIA-Pins dienen nun keine Optokoppler, sondern simple Serienwiderstände sollen die Ports zumindest vor dem Fall schützen, dass man doch mal die Datenrichtung der Joystick-Pins auf Ausgang schaltet und dann die VIA grillt indem man den Joystick betätigt.</description></item><item><title>Musik</title><link>https://www.steckschwein.de/post/musik/</link><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/musik/</guid><description>Das Programmieren von Soundchips ist nicht trivial. Das habe ich damals auf dem C64 schon nicht kapiert. Mit dem Yamaha YM3812 oder auch OPL2 hat das Steckschwein einen weit komplexeren Chip als den SID, denn OPL2 kennt gleich ganze 9 Stimmen statt drei, und jede ist über eine Unzahl Parameter konfigurierbar.
Wie funktioniert der YM3812? Wie kriegt man also einen Ton aus diesem Monstrum? Die beste Quelle zum Thema OPL2 ist wohl &amp;ldquo;Programming the AdLib/Sound Blaster FM Music Chips&amp;rdquo; von Jeffrey S.</description></item><item><title>Logikanalyse II [UPDATE]</title><link>https://www.steckschwein.de/post/logikanalyse-ii/</link><pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/logikanalyse-ii/</guid><description>Inzwischen sind die 74F00 eingetroffen und der 74HCT00 durch einen ebensolchen ersetzt. Das Oszilloskopbild sieht gleich deutlich besser aus:
gelb: /WE, blau: A9
Der Schreibvorgang wird also jetzt zumindest abgeschlossen, bevor sich die Adresse auf dem Adressbus ändert. Das ist schonmal viel sauberer.
Nur leider hat es das Problem nicht gelöst, das Steckschwein läuft mit den &amp;ldquo;richtigen&amp;rdquo; RAMs immer noch instabil, was sich insbesondere bei BASIC-Programmen bemerkbar macht:
Wäre auch zu einfach gewesen.</description></item><item><title>VCFe 18.0 - ein Resümee</title><link>https://www.steckschwein.de/post/vcfe-18-0-ein-resuemee/</link><pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/vcfe-18-0-ein-resuemee/</guid><description>Kein VCFe ohne einen resümmierenden Post-VCFe-Post von uns.
Vorweg: Der neue Veranstaltungsort im Kulturzentrum Trudering ist hervorragend. Eine moderne Veranstaltungshalle, mehr Platz als in der alten ESV-Turnhalle, großzügiger Foyerbereich und ein deutlich größerer Vortragsraum. Die Nahrungsversorgung bestreitet im Kulturzentrum Trudering das integrierte indische Restaurant &amp;ldquo;Taj&amp;rdquo;, welches ebenso überzeugen konnte. Alles in allem ein großer Gewinn und allen Anzeichen nach wird das nächste VCFe auch wieder dort stattfinden.
Das Steckschwein auf dem VCFe 18.</description></item><item><title>Logikanalyse</title><link>https://www.steckschwein.de/post/logikanalyse/</link><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/logikanalyse/</guid><description>Auf dem VCFe 18.0 gab es Dank Nick Müller die Möglichkeit, das Steckschwein mal mit einem Logic Analyzer &amp;ldquo;für große Jungs&amp;rdquo; zu untersuchen. Unsere USB-Logic-Analyzer sind zwar für vieles gut, aber um komplett Adress- und Datenbus sowie einschlägiger Steuerleitungen abzuhorchen, fehlen einfach Kanäle, und selbst dann wären sie nicht schnell genug.
Das Steckschwein am Logic Analyzer. im Hintergrund Nicks Finger.
Die Gelegenheit, ein solches Höllengerät (genauer: ein HP 1652B) und mit Nick auch noch jemanden greifbar zu haben, der selbiges beherrscht, gibt uns die Chance, ein merkwürdiges Problem zu untersuchen, welches schon länger Rätsel aufgibt: Die aktuell verwendeten Hyundai-SRAMs sind mit einer Zugriffszeit von 100ns eigentlich viel zu langsam für 8MHz, zumal der 6502 ja nur die 2.</description></item><item><title>LOAD / SAVE in EhBasic</title><link>https://www.steckschwein.de/post/load-save-in-ehbasic/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/load-save-in-ehbasic/</guid><description>Nachdem EhBasic brauchbar auf unserem SteckOS-Kernel läuft, fehlen noch 2 Kleinigkeiten für das vollkommene Glück. Denn noch lassen sich die geschriebenen BASIC-Kunstwerke nicht speichern. Dies stellt uns gleich vor 2 Herausforderungen:
Unsere FAT32-Implementierung beherrscht noch gar keinen Schreibzugriff. Genauer gesagt ist es noch nicht möglich, freie Cluster zu finden und Verzeichniseinträge zu erzeugen. LOAD und SAVE existieren in EhBasic nur als Vektoren, an die bei Aufruf gesprungen wird. Was dort passieren soll, muss für die jeweilige Hardware selbst implementiert werden.</description></item><item><title>EhBASIC nochmal</title><link>https://www.steckschwein.de/post/ehbasic-nochmal/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/ehbasic-nochmal/</guid><description>Vor geraumer Zeit hatten wir ja bereits EhBASIC auf dem Steckschwein zum Laufen gebracht. Diese Version war im Wesentlichen eine Machbarkeitsstudie. Diese setzte auch noch nicht auf unseren SteckOS-Kernel auf, sondern auf BIOS-Routinen. Hier lag also noch ein wenig Arbeit vor uns.
Die EhBASIC-Dokumentation setzt bei einem potentiellen Portierungsziel nicht sehr viel voraus, und dies sind schon die &amp;ldquo;Preferred requirements&amp;rdquo;:
6502 or better processor (65c02, CCU3000, M38xx). 10k ROM or RAM for the interpreter code.</description></item><item><title>Es wird geschraubt</title><link>https://www.steckschwein.de/post/es-wird-geschraubt/</link><pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/es-wird-geschraubt/</guid><description>Es ist mal wieder recht still ums Schwein. Und mal wieder ist das kein Indiz dafür, dass nicht gewerkelt wird. In den letzten Wochen wurden BIOS und der SteckOS-Kernel auf Basis des Assemblers ca65 neu gebaut. Dessen nachgelagerter Linker erlaubt eine übersichtlichere Strukturierung der Codebasis.
In den FAT32-Code wird aktuell ebenfalls einiges an Hirnschmalz investiert, um endlich Cluster Chain lookups und Schreib-Support bauen zu können.
Darüberhinaus kam letzte Woche der Geistesblitz, die Kommunikation des Tastaturcontrollers ATmega8 mit der Tastatur über dessen eingebauten USART zu machen, anstatt &amp;ldquo;Zu Fuß&amp;rdquo; in Software.</description></item><item><title>Die Spannung sinkt... alles auf 5 Volt</title><link>https://www.steckschwein.de/post/die-spannung-sinkt-alles-auf-5-volt/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/die-spannung-sinkt-alles-auf-5-volt/</guid><description>Endlich, wir haben uns mal bemüht und pünktlich zum 17. VCF das Steckschwein auf 5V umgerüstet. Genauer gesagt war ja nur noch das Video-Board und der YPbPr auf RGB-Encoder das Problem. Der kam zwar mit 5V auch klar, jedoch war dann der Kontrast und die Farbsättigung &amp;ldquo;unterirdisch&amp;rdquo;.
Was haben wir geändert? Vorab muss man sagen, dass uns in den - mittlerweile - letzten Jahren zahlreiche Emails von Interessenten, Retro-Freaks und Bastlern ereilten.</description></item><item><title>Die neuen CPU-Boards sind fertig</title><link>https://www.steckschwein.de/post/neue-cpu-platine/</link><pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/neue-cpu-platine/</guid><description>Wir arbeiten an neuen Revision unserer Prototyp-Platinen.
Den Anfang macht das CPU-Board. Zum einen sind ein paar Layoutfehler korrigiert worden, zum anderen ist der kürzlich vorgestellte Wait-State-Generator in das Board integriert worden.
Mit den neuen Boards wollen wir auch denen entgegenkommen, die sich selbst ein Steckschwein bauen wollen. Das sind nämlich mehr, als wir dachten. Dementsprechend lassen wir jeweils ein paar mehr Boards herstellen. Um die Inbetriebnahme des Steckschweins zukünftig zu vereinfachen, sind eine Hohlbuchse und eine USB-Buchse dazugekommen, um das Steckschwein später mit 5V aus einem handelsüblichen Netzteil oder per USB zu versorgen.</description></item><item><title>Neue CPU-Boards</title><link>https://www.steckschwein.de/post/neue-cpu-boards/</link><pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/neue-cpu-boards/</guid><description>Wir haben vor, eine neue Revision der Steckschwein-Prototyp-Platinen herzustellen. Den Anfang macht ein neues CPU-Board mit einigen Bugfixes und den in Chiptuning beschriebenen zusätzlichen GAL als Waitstate-Generator, sowie einem geändertem Stromanschluss: In Zukunft wird es möglich sein, das Steckschwein mit nur 5V per USB, über einen Rundstecker oder wie gehabt über einen Pin-Header zu versorgen. Die Layouts sind schon fertig:
Bestückungsseite
Lötseite</description></item><item><title>Chiptuning</title><link>https://www.steckschwein.de/post/chiptuning/</link><pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/chiptuning/</guid><description>An den Heimcomputern von &amp;ldquo;damals&amp;rdquo; gemessen ist das Steckschwein mit 4 MHz durchaus einer der schnelleren 6502-Rechner. Damals waren zumeist Taktraten von 1 MHz üblich. Einige wenige hatten deutlich mehr, wie z.B. der Apple IIgs (65816) mit 2.8 MHz. Einen 4 MHz-65(C)02-Heimcomputer hat es damals nach unserem Informationsstand nicht gegeben.
Nun ist es aber so, dass aktuell erhältliche 65c02-CPUs von WDC offiziell mit bis zu 14MHz getaktet werden können, inoffiziell wurden schon problemlos Taktraten von 20 MHz erreicht.</description></item><item><title>Umständliche Portierung von EhBasic</title><link>https://www.steckschwein.de/post/umstaendliche-portierung-von-ehbasic/</link><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/umstaendliche-portierung-von-ehbasic/</guid><description>Es ist manchmal schon sehr mühselig bereits kleinere Probleme mit Assembler lösen zu müssen. Was uns für das Steckschwein fehlt ist eine einfache Sprache mit der man kleine Dinge erledigen und zeigen kann.
Also, warum nicht ein einfaches Basic für das Steckschwein portieren? Die Auswahl an guten Basic-Implementierungen ist überschaubar und unsere Wahl fiel in dem Fall auf EhBasic von LeeDavison. Warum? Nun, es hat sich gezeigt, dass EhBasic von vielen Homebrew-Projekten verwendet wird, die eine 6502-CPU-Basis benutzen.</description></item><item><title>FanTASTische Reise II</title><link>https://www.steckschwein.de/post/fantastische-reise-ii/</link><pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/fantastische-reise-ii/</guid><description>Vor einer Weile haben wir im Beitrag eine-fantastische-reise den Weg zu unserem aktuellen Tastaturcontroller beschrieben.
Wer nicht nochmal nachlesen möchte: Ein ATmega8 dient als SPI Slave als Interface zwischen PS/2-Protokoll, Tastaturmapping und Puffer. Als Basis dient eine angepasste Version des Codes aus AVR Application Note 313, die als Ausgabeschnittstelle den USART des ATmega8 vorsieht. Dies haben wir durch das SPI-Interface des AVR ersetzt.
Steckschwein-Seitig haben wir die Tastaturabfrage immer im Blank-Interrupt des Videochips vorgenommen, genauer gesagt, jeden zweiten Blank.</description></item><item><title>Ein Spiel entsteht...</title><link>https://www.steckschwein.de/post/ein-spiel-entsteht/</link><pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/ein-spiel-entsteht/</guid><description>Im Chrome Browser gibt es einen netten Zeitvertreib in Form des Games &amp;ldquo;Dinosaur&amp;rdquo;. Das Spiel wird immer dann eingeblendet, wenn keine Internet-Verbindung verfügbar ist. Das Spiel ist sehr einfach aufgebaut, kann aber leicht süchtig machen und ist ein netter Zeitvertreib bis die Verbindung wieder verfügbar ist. Genau diese Einfachheit der Grafik und des Gameplays brachte mich auf die Idee das Spiel für das Steckschwein umzusetzen. Wie ich dabei vorgegangen bin, möchte ich Euch hier schildern.</description></item><item><title>Mehr Karten (UPDATE)</title><link>https://www.steckschwein.de/post/mehr-karten-update/</link><pubDate>Fri, 24 Jul 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/mehr-karten-update/</guid><description>Unser &amp;ldquo;Standard&amp;rdquo;-Massenspeicher SD-Karte funktioniert zwar an und für sehr gut, Sorgenkind war aber immer die Initialisierungs-Routine. Bisher ließen sich damit nur günstige Class4-Karten initialisieren, bei &amp;ldquo;höherwertigen&amp;rdquo; Karten schlug die Initialisierung immer fehl, sodass nur etwa 3 von 5 Karten nutzbar waren.
Initialisierungs-Ablauf nach elm-chan.org Das hat uns schon etwas gewurmt, denn irgendwie hatte dieser Stand ein Geschmäckle von &amp;ldquo;Funktioniert aus Versehen&amp;rdquo;. Also mussten wir da nochmal ran. Der Initialisierungs-Flow entspricht im Wesentlichen dem, was auf der bekannten Seite http://elm-chan.</description></item><item><title>Schweinebauchanzeige</title><link>https://www.steckschwein.de/post/schweinebauchanzeige/</link><pubDate>Fri, 24 Jul 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/schweinebauchanzeige/</guid><description>Als Abfallprodukt der letzten Debugging-Session bezüglich SD-Karten und dessen, was von ihnen gelesen wird, hat die Shell ein kleines Hexdump-Feature bekommen, mit dem sich Speicherinhalte ähnlich wie beim &amp;ldquo;M&amp;rdquo;-Kommando bei diversen Maschinensprachemonitoren ausgeben lassen.
Die Handhabung ist entsprechend bekannt: &amp;ldquo;dump &amp;ldquo;, abgebrochen werden kann mit Ctrl-C. Als Abfallprodukt hiervon gilt das jetzt auch für Directory-Listings.
Damit hat die SteckShell nunmehr die Versionsnummer 0.10.</description></item><item><title>WDC und kein Ende</title><link>https://www.steckschwein.de/post/wdc-und-kein-ende/</link><pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/wdc-und-kein-ende/</guid><description>In der letzten Zeit war es hier etwas still ums Steckschwein, was aber nicht als Indiz für Untätigkeit gelten soll. Hauptsächlich haben wir uns auf das Schreiben von Code konzentriert, die Shell wurde weiterentwickelt, etc. Darüberhinaus gab es erste Experimente mit CPLDs. Auf dieser Basis sollen ja zukünftige Verbesserungen der Hardware entstehen, begonnen bei einem eigenständigen SPI-Controller bis hin zur Zusammenfassung der bestehenden Glue-Logik rund um die Adressdekodierung. Da ich mir zu diesem Zweck testhalber solche CPLD-Entwicklungsplatinchen auf Basis des XilinX XC9572XL habe kommen lassen, stellte sich also als erstes die Frage, wie sich dessen 3.</description></item><item><title>Filesystem und Shell</title><link>https://www.steckschwein.de/post/filesystem-und-shell/</link><pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/filesystem-und-shell/</guid><description>Vor kurzem haben wir ja schon von ersten Gehversuchen einer FAT32-Implementation berichtet, mit der wir in der Lage waren, beim Systemstart eine Datei von SD-Karte zu laden.
Was fehlt, ist eine Möglichkeit, innerhalb eines Filesystems einer SD-Karte zu navigieren, Programme zu laden oder Dateien anzuzeigen. Um diese Lücke zu füllen, ist die SteckShell entstanden. In der aktuellen Version 0.6 unterstützt die Shell folgende Funktionen:
Directory auflisten Directory wechseln Programm laden und starten Datei anzeigen Grafik (TMS9929-Rohdaten) anzeigen Wer auf dem VCFe 16.</description></item><item><title>Schachschwein</title><link>https://www.steckschwein.de/post/schachschwein/</link><pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/schachschwein/</guid><description>Nachdem das Grundsystem nun in Form von Platinen vorliegt und Marko dabei ist, das Videoboard zu layouten, ist die Gelegenheit günstig, schon einmal ein wenig vorhandene Software auf das Steckschwein zu portieren. Den Anfang macht MicroChess, 1976 von Peter Jennings für den MOS KIM-1 entwickelt und von Daryl Rictor modifiziert, um über ein serielles Terminal als Ein- /Ausgabestation spielbar zu sein, inklusive der coolen ASCII-Art-Darstellung des Schachbretts.
Dementsprechend einfach war es, es auf dem Steckschwein zum Laufen zu bekommen.</description></item><item><title>Schweinebande</title><link>https://www.steckschwein.de/post/schweinebande/</link><pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/schweinebande/</guid><description>Aller guten Dinge sind zwei</description></item><item><title>Die Platinen sind da!</title><link>https://www.steckschwein.de/post/die-platinen-sind-da/</link><pubDate>Sat, 21 Feb 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/die-platinen-sind-da/</guid><description>Die Platinen für CPU/Mem, UART und IO sind fertig! Dank Überlieferung sogar jede 2mal, sodass wir gleich 2 Steck^H^H^H^H^HPlatinenschweine aufbauen können.</description></item><item><title>Platinen sind da II (UPDATE)</title><link>https://www.steckschwein.de/post/platinen-sind-da-ii-update/</link><pubDate>Sat, 21 Feb 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/platinen-sind-da-ii-update/</guid><description>Damit man mal was sieht!
Die UART-Platine hat noch für einiges Kopfzerbrechen gesorgt, weil sich dann doch noch ein Fehler eingeschlichen hatte. Dieser ließ sich aber durch einen Klecks Lötzinn an der richtigen Stelle korrigieren. Pin25, /ADS hätte noch auf low gezogen werden müssen. Da das von uns in KiCad verwendete Symbol diesen Pin erst gar nicht hatte, war dies im Layout auch nicht drin. Pin war im Schaltplan als &amp;ldquo;nicht verbunden&amp;rdquo; markiert.</description></item><item><title>Genug</title><link>https://www.steckschwein.de/post/genug/</link><pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/genug/</guid><description>Es ist ruhig geworden ums Steckschwein. Das liegt daran, dass wir genug haben. Genug von dem Gewackel auf dem Steckbrett, genug von instabilem Monitorbild und anderen diversen Störanfälligkeiten. Wir wollen endlich Code schreiben, und die Bugs dort suchen, und nicht auf dem Steckbrett. Dazu müssen wir unsere Hardware in eine stabilere Form zu bringen. Das bedeutet: Platinen. Zwar noch nicht unser Einplatiner, aber es spricht ja nichts dagegen, die einzelnen Baugruppen auf je eine Platine zu bringen, und diese zu verbinden.</description></item><item><title>Bootschwein</title><link>https://www.steckschwein.de/post/bootschwein/</link><pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/bootschwein/</guid><description>Die Aufgabe, die wir dem (Steck)BIOS zugedacht haben, beschränkt sich darauf, die vorhandene Hardware zu initialisieren, auf eine eingelegte SD-Karte zu prüfen, und dann von dort das eigentliche &amp;ldquo;Betriebssystem&amp;rdquo; zu laden. Fast ein bisschen PC-like.
Hier ist die Überlegung, im Stammverzeichnis eine bestimmte Datei zu finden und an eine bestimmte Adresse in den Speicher zu laden.
Sollte dies fehlschlagen, kann man immer noch in einen Monitor oder unsere bekannte rs232-Uploadroutine springen.</description></item><item><title>Das Schwein kann singen...</title><link>https://www.steckschwein.de/post/das-schwein-kann-singen/</link><pubDate>Sun, 04 Jan 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/das-schwein-kann-singen/</guid><description>Das Steckschwein hat nun fast alle notwendigen Komponenten, um mit der Außenwelt zu kommunizieren, aber auch nur fast. Bisher ist es noch stumm, aber das sollte sich heute ändern. Wir haben hier noch ein paar YM3812 Schippse nebst benötigter DAC (YM3014B) rumliegen, also haben wir überlegt dem Schwein einfach das singen beizubringen. Wir wollen Musik und Sounds haben.
Der YM3812 ist ein sehr verbreiteter Chip, der sich auf OPL2 beschränkt, für unsere Zwecke aber völlig ausreichend ist.</description></item><item><title>Echte Zeit</title><link>https://www.steckschwein.de/post/echte-zeit/</link><pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/echte-zeit/</guid><description>Eine batteriegepufferte Echtzeituhr gehört ja heutzutage schon zur Serienausstattung, auch bei Retro-Rechnern. Das Steckschwein soll also auch eine bekommen. Chris Ward&amp;rsquo;s Design, welches uns zu Anfang als Grundlage gedient hat (mittlerweile ist davon nicht mehr viel übrig geblieben) verwendet eine DS1687, deren Intel-mäßiges Businterface über ein wenig Glue-Logik direkt an den Datenbus des 6502 angelegt ist und damit auch Platz im IO-Bereich benötigt.
Wir wollen das mit dem Steckschwein anders angehen.</description></item><item><title>Eine fanTASTische Reise</title><link>https://www.steckschwein.de/post/eine-fantastische-reise/</link><pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/eine-fantastische-reise/</guid><description>Von unserem Plan, einen AVR-µC als PS/2-Tastaturcontroller als SPI-Slave einzusetzen, haben wir ja schon in der Vergangenheit berichtet. Damals hieß es: &amp;ldquo;Bequemerweise gibt es zahlreiche fertige Lösungen, die z.B. am anderen Ende rs232 sprechen. Wir wollen aber nur wegen einer Tastatur keinen zweiten UART verbauen. Fehlt also nur eine kleine Anpassung auf SPI.&amp;rdquo;
Hiermit sollte das Schicksal seinen Lauf nehmen. Der kühne Griff in die Bastelkiste sollte einen ATtiny2313 zu Tage fördern, welcher der zugedachten Aufgabe durchaus gewachsen zu sein schien.</description></item><item><title>ROM an, ROM aus</title><link>https://www.steckschwein.de/post/rom-an-rom-aus/</link><pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/rom-an-rom-aus/</guid><description>Nachdem wir also mit dem Adressdecoder durchaus zufrieden sind, müssen wir uns noch einen Weg überlegen, die /ROMOFF-Leitung per Software steuerbar zu machen. Wenn es schon beim BIOS-Update Test äußerst nützlich ist einfach nur eine Brücke umzustecken und damit das ROM zu deaktivieren, wie praktisch muss es erst sein, dies einfach durch Beschreiben einer Speicherstelle zu tun.
Was wir also brauchen, ist ein IO-Pin, der die /ROMOFF-Leitung steuert. Zusätzlich muss dieser Pin beim Einschalten des Systems einen definierten Zustand haben, damit sichergestellt ist, daß zu diesem Zeitpunkt das ROM eingeblendet ist.</description></item><item><title>Dekoder, die Dritte</title><link>https://www.steckschwein.de/post/dekoder-die-dritte/</link><pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/dekoder-die-dritte/</guid><description>Bekanntlich dekodiert unser GAL die oberen 8bit des Adressbus, um den Bereich $8000-$ffff unter RAM, IO-Bereich und ROM einzuteilen. Die unteren 32k werden am Decoder vorbei direkt von der Adressleitung A15 selektiert. Das Memory-Mapping, das sich daraus ergibt, ist - zur Wiederholung - wie folgt:
Bereich Was $0000 - $7fff RAM $8000 - $cfff RAM $d000 - $dfff IO-Bereich $e000 - $ffff ROM Die letzte Änderung am Decoder war, das ROM bei Bedarf ausblendbar zu machen.</description></item><item><title>TMS9929 Composite Video und RGB+H/Y</title><link>https://www.steckschwein.de/post/tms9929-composite-video-und-rgbhy/</link><pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/tms9929-composite-video-und-rgbhy/</guid><description>Damit Dommas nicht langweilig wird und auch in den Gfx-Genuss kommt muss natürlich eine Lösung her. Er hat momentan keine Möglichkeit das Steckschwein mit Grafik an seinem geliebten Commodore 1084-S Monitor zu betreiben. Was ist also zu tun?
Wir haben ja im Post &amp;hellip; beschrieben wie wir aus dem YRyBy des TMS9929 ein brauchbares RGB+Sync (BAS) Signal erzeugen können. Das funktioniert auch wunderbar an allen derzeit gängigen CRT-Fernsehern und auch an allen neuzeitlichen Flat-Screens wenn diese noch einen SCART-Anschluss oder ebend RGB+Sync (PAL-RGB) Eingänge besitzen.</description></item><item><title>SPI mit 65c22 VIA</title><link>https://www.steckschwein.de/post/spi-mit-65c22-via/</link><pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/spi-mit-65c22-via/</guid><description>Es gibt verschiedene Ansätze, einem 6502-basierten System SPI beizubiegen. Daryl Rictor hat z.B. einen CPLD-basierten SPI-Controller mit passendem Businterface entwickelt. Meist jedoch wird eine 6522 VIA hergenommen und SPI per Bit Banging implementiert. Auch hier gibt es verschiedenen Ansätze, Andre Fachat hat es mit ein wenig externer Logik sogar geschafft, das Schieberegister der VIA im für SD-Karten nötigen SPI Mode 0 zu betreiben. Normalerweise geht das ja nicht, das das Schieberegister der VIA die Daten nicht vor dem ersten Taktimpuls anlegen kann.</description></item><item><title>Tore zur Welt</title><link>https://www.steckschwein.de/post/tore-zur-welt/</link><pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/tore-zur-welt/</guid><description>Um dem Ziel eines &amp;ldquo;richtigen&amp;rdquo; Computers näher zu kommen, brauchen wir nicht nur einen Videochip, wir brauchen auch Eingabegeräte und Massenspeicher.
Zwar soll unser Rechner so retro sein, dass es ihn damals, zur Hochzeit der 8bit-Heimcomputer, durchaus hätte geben können, realistischerweise wollen wir ihn jedoch mit durchaus modernen Schnittstellen ausstatten. Die 8bit-Rechner aus &amp;ldquo;unserer Zeit&amp;rdquo; haben IO-Chips wie den 6526 oder 6522 benutzt, um Tastatur (Matrix), Joysticks und Massenspeicher anzusteuern. Das haben wir auch vor.</description></item><item><title>Noch schlauerer Decoder</title><link>https://www.steckschwein.de/post/noch-schlauerer-decoder/</link><pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/noch-schlauerer-decoder/</guid><description>Wir sind jetzt also fast in der Lage, das RAM unter dem ROM zu nutzen. Hineinschreiben geht, lesen noch nicht. Da ist das ROM noch im Weg. Wir müssen also einen Weg finden, die GAL-Logik von außen zu beeinflussen. Unser GAL hat noch genügend Eingänge, sodass wir einen Pin zum ROM-Ein-/Ausschalter machen wollen. Lesezugriffe nach $e000-$ffff sollen also nur noch dann im ROM landen, wenn es &amp;ldquo;eingeschaltet&amp;rdquo; ist. Sonst wollen wir ins RAM.</description></item><item><title>Schlauer(er) Decoder</title><link>https://www.steckschwein.de/post/schlauerer-decoder/</link><pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/schlauerer-decoder/</guid><description>Im Rahmen unserer Reihe &amp;ldquo;Kleine Verbesserungen an der Architektur&amp;rdquo; ist heute der Adressdekoder dran. Dieser entscheidet bekanntlich anhand der am Adressbus anliegenden Adresse (oder genauergesagt deren höheren 8bit), welcher Baustein an der entsprechenden Adresse eingeblendet werden soll. Durch den Umstand, dass die oberen 8k dem ROM gehören, lassen sich die darunterliegenden 8k RAM nicht ohne weiteres nutzen. Die für die Selektierung des ROMs und der oberen 32k RAM sehen folgendermaßen aus:</description></item><item><title>Verfeinerungen am Design</title><link>https://www.steckschwein.de/post/verfeinerungen-am-design/</link><pubDate>Tue, 24 Jun 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/verfeinerungen-am-design/</guid><description>So langsam geht es weiter mit der Steckschweinentwicklung.
Die Timingprobleme mit dem VDP bedürfen einer eingehenden Prüfung und Messung, um genau zu verstehen, wo was nicht passt. Unsere Ideen mit Puffern und/oder versetzten Taktsignalen, um den VDP früher &amp;ldquo;kommen&amp;rdquo; zu lassen stellen wir zurück, bis wir gesicherte Erkenntnisse haben. Ein Herumdoktern aufgrund von Vermutungen halten wir nicht für zielführend. Vorher ist es auch nicht sinnvoll, irgendwelche Platinen zu löten.
Stattdessen stecken wir ein wenig Hirnschmalz ins aktuelle Design.</description></item><item><title>Von Hummeln und Puffern</title><link>https://www.steckschwein.de/post/von-hummeln-und-puffern/</link><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/von-hummeln-und-puffern/</guid><description>Nach dem VCFe ist erstmal nicht viel aktive Entwicklung passiert. Vielmehr haben wir die Erkenntnis, dass wir ein grundsätzliches Timing-Problem haben (danke nochmal an Udo Möller) ein klein wenig sacken lassen. Im Grunde genommen ist es so, wie es sich aus dem vorletzten Post schon herauslesen läßt. Der WDC 65c02 hat eine Data Hold Time von 10ns, während der TMS9929 30ns braucht, sein Zeug vom Bus zu holen. Die verwendeten 16550er UARTs auch.</description></item><item><title>Murphy III - Timing ist alles</title><link>https://www.steckschwein.de/post/murphy-iii-timing-ist-alles/</link><pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/murphy-iii-timing-ist-alles/</guid><description>In den Posts http://8bit-gefriemel.blogspot.de/2014/03/murphy.html und http://8bit-gefriemel.blogspot.de/2014/04/murphy-ii.html sind einige merkwürdige Phänomene und deren Lösungsversuche geschildert. Wie sich heute gezeigt hat, konnten wir gar nicht weiter daneben liegen.
Alles Quatsch. Die Fehlersuche nach dem &amp;ldquo;K&amp;rdquo;-Problem. Stack und so. Alles super. Klar, das mit dem Initialisieren des Stackpointers war natürlich richtig und wichtig, und dass die uart_tx routine besser funktioniert wenn man auf Stack-Operationen verzichtet, hätte uns eigentlich eher stutzig machen sollen. Aber der Reihe nach.</description></item><item><title>TMS9929 Wir sind am Ziel!</title><link>https://www.steckschwein.de/post/tms9929-wir-sind-am-ziel/</link><pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/tms9929-wir-sind-am-ziel/</guid><description>Nachdem das Timing vom Steckschwein grundsätzlich passt, sind auf einmal auch sämtliche Voodoo-Fehler verschwunden.
Jetzt lässt sich der VDP auch besser ansprechen, allerdings gibt es schon noch ein paar Probleme zu lösen, bspw. ist das DRAM sehr instabil irgendwie flackert ständig der Screen oder die Zeichen &amp;ldquo;Nullen&amp;rdquo; sich aus. Wir untersuchen das Steckbrett und die Spannungsversorgung. Wir beschließen, die Steckbrettkabel durch kurze blanke Drahtbrücken zu ersetzen und platzieren direkt am Vcc der einzelnen DRAMs die Abblock-Kondensatoren mit 100nF.</description></item><item><title>Schaltplan</title><link>https://www.steckschwein.de/post/schaltplan/</link><pubDate>Sat, 05 Apr 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/schaltplan/</guid><description>Damit Klarheit darüber herrscht, worum es überhaupt geht, haben wir den Schaltplan in die einzelnen Gruppen (Prozessor+ Freunde, Speicher, UART) zerlegt.
Die aktuelle Stückliste liest sich laut Eagle folgendermaßen:
Part Value Device C1 100n C5/3 C3 1n C-EU025-025X050 C4 10n C-EU025-025X050 C5 10µF CPOL-EUE2,5-6E C6 100n C5/3 C7 100n C5/3 C8 100n C5/3 C12 1µF CPOL-EUE2,5-6E C13 100n C5/3 C14 100n C5/3 C15 100n C5/3 C16 1µF CPOL-EUE2,5-6E C17 1µF CPOL-EUE2,5-6E C18 1µF CPOL-EUE2,5-6E C19 1µF CPOL-EUE2,5-6E IC1 CY62256LL-PC CY62256LL-PC IC3 CY62256LL-PC CY62256LL-PC IC4 NE555 NE555 IC5 28c64 2864 IC6 16550 UART XR-16C550P IC8 74LS06N 74LS06N IC9 GAL22V10 22V10 IC10 MAX232 MAX232 QG1 2MHz XO-14 QG2 1.</description></item><item><title>Exkurs: Wie kommt Code aufs Steckschwein?</title><link>https://www.steckschwein.de/post/exkurs-wie-kommt-code-aufs-steckschwein/</link><pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/exkurs-wie-kommt-code-aufs-steckschwein/</guid><description>Die Programmierung eines Computers, der nur aus einer gesteckten Schaltung besteht und weder Tastatur noch Speichermöglichkeit hat, ist eine mühsame Angelegenheit. Die allerersten Experimente bekamen ihr Futter auf einem 27128-EPROM serviert. Bekanntlich wollen diese vor dem Beschreiben mit neuem Code mit UV-Licht gelöscht werden. Also wurde für jedes Update ein EPROM mit neuem Code gebrannt, um die EPROMS anschließend in 10er-Packen ins Löschgerät zu schieben. 15 Minuten Kaffeepause.
Überhaupt, Code: Für die ersten Experimente hat es genügt, die reinen Hexcodes in einen Hexeditor zu tippen und die Daten dann zu brennen.</description></item><item><title>Murphy II</title><link>https://www.steckschwein.de/post/murphy-ii/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/murphy-ii/</guid><description>Flugs also ein ROM gebrannt mit der memtest-routine, in die nach der Reset-Routine eingesprungen wird. Gleiches Ergebnis. Beim ersten Auftreten des &amp;ldquo;K statt OK&amp;rdquo;-Fehlers ist erstmal die doch etwas windig anmutende Verdrahtung der Adressleitungen zwischen Prozessor, den RAM-Bausteinen und dem ROM mit &amp;ldquo;richtigen&amp;rdquo; Steckbrettstrippen statt Klingeldraht nachverdrahtet worden. Das war vermutlich etwas voreilig, schließlich hats vorher ja auch schon funktioniert. Schließlich stellt sich heraus, dass sich hier in der Tat ein paar Fehler eingeschlichen haben, die auch beim Durchklingeln der einzelnen Adressleitungen nicht aufgefallen sind: Kurzschlüsse.</description></item><item><title>... kein Spaß - Murphy schlägt zu</title><link>https://www.steckschwein.de/post/kein-spass-murphy-schlaegt-zu/</link><pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/kein-spass-murphy-schlaegt-zu/</guid><description>Neben all den ermutigenden Experimenten gibt es natürlich auch immer mal wieder Rückschläge. Mittlerweile haben wir schon ein durchaus komplexes Gebilde auf dem Steckbrett, welches ja per se nicht die ideale Plattform ist, um so etwas zu bauen.
So wie aktuell gerade mein &amp;ldquo;Steckschwein&amp;rdquo; ein sehr merkwürdiges Verhalten an den Tag legt, ohne dass an der Schaltung etwas geändert worden wäre (Marko ist Zeuge).
Vorab nochmal der Ablauf unserer Upload-Routine, mit der wir das Steckschwein via RS232 mit Code befüttern:</description></item><item><title>ACIA muss wieder raus</title><link>https://www.steckschwein.de/post/acia-muss-wieder-raus/</link><pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/acia-muss-wieder-raus/</guid><description>Die 65x51 ACIA erschien uns als die am tiefsten hängende Frucht, um eine RS232 Schnittstelle zu implementieren, nachdem wir Bit Banging nach C64 Vorbild ziemlich schnell verworfen hatten.
Auch programmiertechnisch mach die ACIA einen simplen Eindruck, ganze drei Register wollen beherrscht werden.
Die rs232-Schnittstelle ermöglicht uns, Code auf den Steckbrettrechner zu laden, ohne jedesmal das EEPROM neu brennen zu müssen. Eine gewaltige Erleichterung.
Aber - wir haben es bereits erwähnt - die ACIA hat keine Zukunft bei uns.</description></item><item><title>Das Design wird erweitert</title><link>https://www.steckschwein.de/post/das-design-wird-erweitert/</link><pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/das-design-wird-erweitert/</guid><description>Sinn der Sache ist ja nicht, etwas 1:1 nachzubauen, sondern ein möglichst eigenes Design. Nachdem wir mit Chris&amp;rsquo; Design - bzw. dessen, was wir davon übernommen haben (Adressdekodierung, ACIA, VIA) - genug herumgespielt hatten, galt es, &amp;ldquo;unser&amp;rdquo; Ding draus zu machen. Der erste Schritt war ein Sprung ins kalte Wasser in die uns bislang noch unbekannte Welt der Programmierbaren Logik. Dazu haben wir zunächst die Adressdekodierung bestehend aus 74ls138/74ls154 sowie etwas glue Logic in VHDL implementiert und auf ein GAL22V10D gebrannt.</description></item><item><title>Ein richtiger Computer soll es sein</title><link>https://www.steckschwein.de/post/ein-richtiger-computer-soll-es-sein/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/ein-richtiger-computer-soll-es-sein/</guid><description>Nachdem die vorangegangenen Spielereien sehr ermutigend verliefen, war der nächste Schritt klar. Wenn wir so weit kommen, kommen wir auch noch weiter. Das Ziel ist jetzt definitiv ein funktionierender 8bit-Rechner mit 64k RAM.
Da der 6502 keinen DRAM-Refresh liefert und wir uns den Aufwand eines diskreten Refresh-Generators ersparen wollen, soll es ein SRAM-basiertes Design werden. Bei ein wenig Recherche beim Elektronik-Versenders unseres Vertrauens stellen wir fest, dass 2x32k*8 in Form von zwei 2 62256 eine komfortable Lösung sein würden.</description></item><item><title>TMS9929 - Wir wollen was sehen...</title><link>https://www.steckschwein.de/post/tms9929-wir-wollen-was-sehen/</link><pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/tms9929-wir-wollen-was-sehen/</guid><description>&amp;hellip; und zwar auf einem Bildschirm! Aber wie stellt man sowas an?! Nun, wir schauen uns um, was Ende der 70-er bzw. Anfang der 80-er Jahre Stand der Technik war und was sich mit überschaubarem Aufwand an eine 6502 CPU &amp;ldquo;anschließen&amp;rdquo; lässt. Die Auswahl ist leider überschaubar, denn es sollte irgendwas in DIP maximal noch SDIP sein und dazu noch irgendwie lieferbar - &amp;ldquo;new old stock&amp;rdquo;.
Wir fanden die TMS9918/28/29-Serie und einige Nachfolger wie den TMS9938/58.</description></item><item><title>Doppelt hält besser</title><link>https://www.steckschwein.de/post/doppelt-haelt-besser/</link><pubDate>Sat, 22 Feb 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/doppelt-haelt-besser/</guid><description>Damit sich ein &amp;ldquo;Steckschwein&amp;rdquo; nicht so einsam fühlt, haben wir das ganze nochmal geklont. Jetzt hat jeder sein eigenes Steckschwein und kann daran rumschrauben oder besser gesagt rumstecken.
Da wir das Tooling &amp;ldquo;leichtgewichtig&amp;rdquo; halten wollen, gabs auch gleich ein kleines Problem zu lösen. Die Dekoder-Logik für den GAL wurde bisher in VHDL definiert und mit dem Hersteller-Produkt http://www.latticesemi.com/ispleverclassic ein entsprechendes JEDEC-File erzeugt. Das war uns dann doch viel zu unhandlich und wir haben uns nach Alternativen umgetan.</description></item><item><title>Am Anfang war das NOP</title><link>https://www.steckschwein.de/post/am-anfang-war-das-nop/</link><pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/am-anfang-war-das-nop/</guid><description>Wenn man 20 Jahre lang den Jugendtraum mit sich rumträgt, einen 8bit-Rechner selber zu bauen, dann hat man 20 Jahre Zeit, einzurosten. Langsames Rantasten an das große Ziel ist angesagt.
In diesem Fall soll unser 65c02 erstmal nur NOPs ausführen und wir wollen zuschauen, was auf dem Adressbus passiert. Der Datenbus ist hart verdrahtet auf NOP ($EA, 11101010) . Als Reset-Schaltung kommt eine auf Basis des allseits beliebten NE555 zum Einsatz.</description></item><item><title>Euphorie: Jetzt auch RAM!</title><link>https://www.steckschwein.de/post/euphorie-jetzt-auch-ram/</link><pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/euphorie-jetzt-auch-ram/</guid><description>Die Euphorie ob des Ausgangs des letzten Versuchs nutzend wird jetzt weitergebaut. Immerhin sind wir so nah an einem richtigen Computer. Was fehlt, ist RAM. Leider nichts im Haus.
Eine temporäre Organspende aus einem C64-Easyflash-Cartridge (Cooles Teil: http://skoe.de/easyflash/doku.php?id=start) verschafft uns ein 6264 SRAM. Dieses verdrahten wir analog zum EPROM, allerdings brauche es hier noch einen Hauch von Gatterlogik, um das EEPROM ans obere Ende des Adressraums zu mappen, während das SRAM in den unteren 8k lebt.</description></item><item><title>Mehr Mut: Es werde Code!</title><link>https://www.steckschwein.de/post/mehr-mut-es-werde-code/</link><pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/mehr-mut-es-werde-code/</guid><description>Nachdem uns nach einiger Zeit dann doch langweilig wurde, den Prozessor beim NOPs ausführen zu beobachten musste der nächste Kick her: Es soll Code ausführen! Also ein wenig Code geschrieben (dieser ist leider nicht überliefert, enthielt lediglich einige NOPs und JMPs, gerade genug also, um uns in blanke Verzückung zu versetzen), auf ein 27128 EPROM gebrannt und an Adress- und Datenbus angeschlossen. /OE und /CS des EPROM wurden einfach auf Masse gelegt.</description></item><item><title>About</title><link>https://www.steckschwein.de/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/about/</guid><description>The Steckschwein is a homebrew 8bit computer based on the 65c02 CPU.
Our initial mission used to be to create a computer that might have existed during the heyday of 8bit home computers. Only with more modern interfaces to the outside world, like SPI for SD card storage instead of floppy disks. Now, having achieved that already quite some time ago, we now try to push the limits of what is possible.</description></item><item><title>Hardware</title><link>https://www.steckschwein.de/hardware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/hardware/</guid><description>CPU/Memory The actual computer core is composed of the actual 65c02 CPU, an Alliance Memory AS6C4008 512k x 8 SRAM, a 32k EEPROM Atmel 28c256 and a Xilinx XC9572 CPLD.
Buffers The &amp;ldquo;computer core&amp;rdquo;, CPU, ROM, RAM and CPLD plus the VIA 65c22 and the &amp;ldquo;non-65xx-bus&amp;rdquo; native rest of the system, such as the UART 16550, V9958 and OPL2 are separated through two 74HCT245 buffers, to keep the bus lines as short as possible.</description></item><item><title>Impressum</title><link>https://www.steckschwein.de/impressum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/impressum/</guid><description>Angaben gemäß § 5 TMG: Thomas Woinke Schüleinstraße 4 81673 München
Marko Lauke
Gräfin-Dönhoff-Straße 16
83024 Rosenheim
Kontakt E-Mail: info (at) steckschwein.de
Fax: +49 3212 115 8877
Datenschutzerklärung (DSGVO) Auf dieser Webseite werden keine personenbezogenen Daten erhoben, gespeichert oder verarbeitet.
Data Protection Policy (GDPR) This website does not collect, store or process Personally Identifiable Information (PII).
Verweis auf Dritte Diese Website wird auf Github als Github Pages gehostet. Die Github Privacy Policy ist hier hinterlegt.</description></item><item><title>jumptable</title><link>https://www.steckschwein.de/jumptable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/jumptable/</guid><description>jumptable filesystem | kernel | sdcard | spi | video |
filesystem fat_update_direntry | krn_chdir | krn_close | krn_fopen | krn_fread_byte | krn_fseek | krn_getcwd | krn_mkdir | krn_open | krn_opendir | krn_read_direntry | krn_readdir | krn_rmdir | krn_unlink | krn_write_byte |
fat_update_direntry update direntry given as pointer (A/Y) to FAT32 directory entry structure for file fd (X).
In X - file descriptor to fd_area of the file
A/Y - pointer to direntry buffer with updated direntry data of type F32DirEntry Out C - C = 0 on success (A=0), C = 1 and A = otherwise.</description></item><item><title>library</title><link>https://www.steckschwein.de/libsrc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/libsrc/</guid><description>library fat32 | joystick | keyboard | sdcard | spi | uart | util | vdp |
fat32 fat_chdir | fat_close | fat_fopen | fat_fread_byte | fat_fread_vollgas | fat_fseek | fat_get_root_and_pwd | fat_mkdir | fat_mount | fat_opendir | fat_read_direntry | fat_readdir | fat_rmdir | fat_unlink | fat_update_direntry | fat_write_byte |
fat_chdir change current directory
In A, low byte of pointer to zero terminated string with the file path
X, high byte of pointer to zero terminated string with the file path Out C, C=0 on success (A=0), C=1 and A= otherwise</description></item><item><title>Loading ASCII sources in EhBasic</title><link>https://www.steckschwein.de/post/ascii_ehbasic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/ascii_ehbasic/</guid><description>Since our implementation of FAT32 now supports reading a file byte for byte, a little rework of the file handling in our version of EhBasic is in order.
In the past, we only could read or write a file as a whole, relative to the location in memory where the according pointer pointed to. We used this in EhBasic to save and load BASIC programs by dumping and reloading it’s binary representation from memory.</description></item><item><title>Resources</title><link>https://www.steckschwein.de/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/resources/</guid><description>Repositories All sources for steckOS, BIOS, firmware, decoder and also schematics and layouts can be found in our repositories at bitbucket.org:
All software (steckOS, BIOS, libraries, tools, games, stuff): https://github.com/Steckschwein/code
Hardware (Schematics, PCB Layouts, Firmware): https://github.com/Steckschwein/hardware
Steckschwein Emulator: https://github.com/Steckschwein/steckschwein-emulator
Tools We almost exclusively use Open Source-Software to design and code for the Steckschwein.
cc65 Extensive suite of cross development tools for almost every 6502 based platform. We mostly use ca65 because of the linker.</description></item><item><title>Search</title><link>https://www.steckschwein.de/search/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/search/search/</guid><description/></item><item><title>Single Board Steckschwein</title><link>https://www.steckschwein.de/sbc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/sbc/</guid><description>The single board Steckschwein marks several major milestones in the development of our favourite homebrew computer. The goal has alwas been to integrate the various boards onto one single PCB.
Specifications 65c02-CPU @ 10MHz
512k RAM
32k ROM
Video chip V9958
Video RAM: 128 KB + 64 KB of expanded VRAM (optional) Text modes: 80 x 24 32 x 24 Graphics Resolutions: 512 x 212 (4 or 16 colors out of 512) 256 x 212 (16, 256, 12499 or 19268 colors) Sprites: 32 (max 8 per horizontal line) Scroll registers Sound chip YM3812 (OPL2)</description></item><item><title>Software</title><link>https://www.steckschwein.de/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/software/</guid><description>BIOS At initial boot time, the ROM bank containing the BIOS is banked in. The BIOS initializes the hardware, such as the UART and the video chip, and tries to load the steckOS loader executable (usually LOADER.PRG) from SD card and executes it. If that fails, the BIOS expects a PRG binary uploaded via XMODEM. UART baud rate and the name of the steckOS loader executable can be configured and are stored in the RTC&amp;rsquo;s NVRAM.</description></item><item><title>SPI-Devices</title><link>https://www.steckschwein.de/spi-devices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/spi-devices/</guid><description>SD-Card as really cheap and lazy mass storage The SD card is the &amp;ldquo;killer application&amp;rdquo;, that sold the idea to us to use SPI as the main peripheral bus. The only additional hardware effort was to level shift the signals from and to the sd-card, as it runs on 3.3V while the Steckschwein uses 5V. To accomplish this, the SPI clock, SPI slave select and MOSI are converted using a 74LS07, with it&amp;rsquo;s open collector outputs pulled up to 3.</description></item></channel></rss>