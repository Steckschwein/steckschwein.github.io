<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spi on Steckschwein</title><link>https://www.steckschwein.de/categories/spi/</link><description>Recent content in spi on Steckschwein</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.steckschwein.de/categories/spi/index.xml" rel="self" type="application/rss+xml"/><item><title>Weird bug in SD card code</title><link>https://www.steckschwein.de/post/weird-bug-in-sd-card-code/</link><pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/weird-bug-in-sd-card-code/</guid><description>Frank van den Hoef, who is adapting the Steckschwein SPI &amp;amp; FAT32 code for his tiny65 machine made me aware of a classic mistake for a 6502 assembly coder to make. Namely in our sdcard driver, when waiting for the &amp;ldquo;proper&amp;rdquo; response from the card (which should have bit 7 cleared). The routine handling this looked like this:
1 sd_cmd_response_wait: 2 ldy #sd_cmd_response_retries 3 @l: dey 4 beq sd_block_cmd_timeout ; y already 0?</description><content>&lt;p>Frank van den Hoef, who is adapting the Steckschwein SPI &amp;amp; FAT32 code for his tiny65 machine made me aware of a classic mistake for a 6502 assembly coder to make. Namely in our sdcard driver, when waiting for the &amp;ldquo;proper&amp;rdquo; response from the card (which should have bit 7 cleared). The routine handling this looked like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>1 sd_cmd_response_wait:
2 ldy #sd_cmd_response_retries
3 @l: dey
4 beq sd_block_cmd_timeout ; y already 0? then invalid response or timeout
5 jsr spi_r_byte
6 bit #80 ; bit 7 clear
7 bne @l ; no, next byte
8 cmp #$00 ; got cmd response, check if $00 to set z flag accordingly
9 rts
10 sd_block_cmd_timeout:
11 debug &amp;#34;sd_block_cmd_timeout&amp;#34;
12 lda #$1f ; make up error code distinct from possible sd card responses to mark timeout
13 rts
&lt;/code>&lt;/pre>&lt;p>Classic. Obviously, line 6 should read:&lt;/p>
&lt;pre tabindex="0">&lt;code> bit #$80 ; bit 7 clear
&lt;/code>&lt;/pre>&lt;p>With that fixed, the sd card init routine now fails, which is odd since we fixed something that was obviously broken.&lt;/p>
&lt;p>&lt;img src="images/sd_fail-e1571229478149.jpg" alt="sd_fail.jpg">&lt;/p>
&lt;p>Ok, now what? Enabling Marko&amp;rsquo;s mighty debugging macros, it becomes apparent that the sd card init fails right after sending CMD0 to the card. This command is the first command of the init sequence and is supposed to put the card into &amp;ldquo;idle mode&amp;rdquo;. Which the card confirms with an answer of $01. Which is what the init code is expecting, and not getting. Instead, we get $3F, which does not make a lot of sense.&lt;/p>
&lt;p>But why did it work before the fix? Assuming that the card did not change it&amp;rsquo;s behaviour at the same time I fixed the code, let&amp;rsquo;s check what actually happened. Before the fix, we were ANDing $3F with 80:&lt;/p>
&lt;p>&lt;code> 00111111 $3f&lt;/code>&lt;br>
&lt;code>01010000 80 (no $, decimal)&lt;/code>&lt;/p>
&lt;p>In this case, the BNE after the BIT #80 would take the branch to @l, causing the next byte being read, until finally the card responds with $01:&lt;/p>
&lt;p>&lt;code> 00000001 $01&lt;/code>&lt;br>
&lt;code>01010000 80 (no $, decimal)&lt;/code>&lt;/p>
&lt;p>Now the BNE does not take the branch, and the routine exits.&lt;/p>
&lt;p>Now, with the fixed code,  ANDing $3F with **$**80, to check if bit 7 is clear, which it is:&lt;/p>
&lt;p>&lt;code> 00111111 $3F&lt;/code>&lt;br>
&lt;code>10000000 $80&lt;/code>&lt;/p>
&lt;p>Alright, exit the loop and return $3f as response of the card. Which isn&amp;rsquo;t $01, so init failed.&lt;/p>
&lt;p>At this point, I have no explanation for the card responding $3F. I assume that the card might be not ready to process commands at this point, so I added code to repeat sending CMD0 until we get $01 or we run out of retries.&lt;/p></content></item><item><title>Neue Hardware - die Platinen sind da</title><link>https://www.steckschwein.de/post/neue-hardware-die-platinen-sind-da/</link><pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/neue-hardware-die-platinen-sind-da/</guid><description>Die neuen IO-Platinen mit integriertem UART sind fertig und haben ihren Weg von China nach München gefunden.
Mit dem neuen Layout hat es nicht nur der UART mit aufs IO-Board geschafft, es sind auch etliche kleinere und größere Verbesserungen eingeflossen:
Die Joystickports wurden komplett neu designed. Die Optokoppler sparen wir uns, stattdessen wählen wir über einen VIA Pin verschiedene Treiber an, die den gewünschten Joystickport mit VIA Port A verbindet. Die Ports lassen sich auch per Software komplett abschalten, damit der User-Port frei verfügbar ist.</description><content>&lt;p>Die neuen IO-Platinen mit integriertem UART sind fertig und haben ihren Weg von China nach München gefunden.&lt;/p>
&lt;p>Mit dem neuen Layout hat es nicht nur der UART mit aufs IO-Board geschafft, es sind auch etliche kleinere und größere Verbesserungen eingeflossen:&lt;/p>
&lt;ul>
&lt;li>Die Joystickports wurden komplett neu designed. Die Optokoppler sparen wir uns, stattdessen wählen wir über einen VIA Pin verschiedene Treiber an, die den gewünschten Joystickport mit VIA Port A verbindet. Die Ports lassen sich auch per Software komplett abschalten, damit der User-Port frei verfügbar ist. Als Schutz für die VIA werden Serienwiderstände verwendet.&lt;/li>
&lt;li>Der SD-Karten-Footprint und der verwendente Slot passen genau zusammen. Das war beim alten Board nicht der Fall. Jetzt sind die Karten- und die Schreibschutzerkennung endlich nutzbar.&lt;/li>
&lt;li>Die Datenpins für die PS/2 Schnittstelle am ATmega8 sind gewandert und liegen jetzt an PD6 und 7. Dadurch sind die RX und TX Pins des USART verfügbar geworden und können nun z.B. für das Debugging des Tastaturcontrollers verwendet werden.&lt;/li>
&lt;li>Zweckmäßigere Plazierung vom SPI-Anschluss des ATmega8 und des freien SPI Ports am Platinenrand. Updates der Tastaturcontrollerfirmware sind nun kein Krampf mehr.&lt;/li>
&lt;li>Der User-Port hat ein besseres Pinout.&lt;/li>
&lt;li>Die neue Platine sieht einfach besser aus.
&lt;img src="images/img_3091.jpg" alt="IMG_3091"> Frisch ausgepackte Platine&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/img_3092.jpg" alt="IMG_3092"> Fertig bestückte Platine
&lt;img src="images/img_3093.jpg" alt="IMG_3093"> Die nun obsolet gewordenen Platinen.&lt;/p></content></item><item><title>FanTASTische Reise II</title><link>https://www.steckschwein.de/post/fantastische-reise-ii/</link><pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/fantastische-reise-ii/</guid><description>Vor einer Weile haben wir im Beitrag /index.php/2014/12/15/eine-fantastische-reise/ den Weg zu unserem aktuellen Tastaturcontroller beschrieben.
Wer nicht nochmal nachlesen möchte: Ein ATmega8 dient als SPI Slave als Interface zwischen PS/2-Protokoll, Tastaturmapping und Puffer. Als Basis dient eine angepasste Version des Codes aus AVR Application Note 313, die als Ausgabeschnittstelle den USART des ATmega8 vorsieht. Dies haben wir durch das SPI-Interface des AVR ersetzt.
Steckschwein-Seitig haben wir die Tastaturabfrage immer im Blank-Interrupt des Videochips vorgenommen, genauer gesagt, jeden zweiten Blank.</description><content>&lt;p>Vor einer Weile haben wir im Beitrag &lt;a href="https://www.steckschwein.de/index.php/2014/12/15/eine-fantastische-reise/">/index.php/2014/12/15/eine-fantastische-reise/&lt;/a> den Weg zu unserem aktuellen Tastaturcontroller beschrieben.&lt;/p>
&lt;p>Wer nicht nochmal nachlesen möchte: Ein ATmega8 dient als SPI Slave als Interface zwischen PS/2-Protokoll, Tastaturmapping und Puffer. Als Basis dient eine angepasste Version des Codes aus AVR Application Note 313, die als Ausgabeschnittstelle den USART des ATmega8 vorsieht. Dies haben wir durch das SPI-Interface des AVR ersetzt.&lt;/p>
&lt;p>Steckschwein-Seitig haben wir die Tastaturabfrage immer im Blank-Interrupt des Videochips vorgenommen, genauer gesagt, jeden zweiten Blank. Damit wurde der AVR auf SPI-Seite relativ wenig gestresst.&lt;/p>
&lt;p>Eigentlich aber wollen wir nur eine Tastaturabfrage durchführen, wenn wir auch tatsächlich etwas vom User erwarten. Also raus mit der Abfrage aus der IRQ-Routine und das SPI-Interface des AVR gepollt, bis es etwas anderes als $00 liefert. Hierbei trat ein altes Problem wieder zutage, nämlich das sporadisch Tastendrücke &amp;ldquo;verlorengehen&amp;rdquo;. Die ATmega8-Firmware bedarf also noch weiterer Betrachtung.&lt;/p>
&lt;p>Der Code aus Appnote 313 funktioniert grob so, dass die CLK-Leitung des PS/2-Interfaces einen Interrupt triggert. Hat diese 11 Bit(Startbit, 8 Datenbits, Paritätsbit, Stopbit) empfangen, wird noch in der ISR-Routine die Decodierung der Scancodes zu einem ASCII-Wert aufgerufen und dieser im Puffer abgelegt. Dieser ASCII-Wert wird gepuffert und über den USART per rs232 ausgegeben. Unser Ansatz war, den USART-Teil durch einen SPI-Slave zu ersetzen. Dies haben wir 1:1 getan, sodass der SPI-Slave immer nur an einer bestimmten Stelle innerhalb der main()-Schleife bedient wurde.&lt;/p>
&lt;p>Erschwerend kommt hinzu, dass der INT0-Interrupt nach erfolgreicher Übertragung eines kompletten Bytes direkt die Dekodierung vorgenommen hat. Diese beinhaltet einen relativ teuren Lookup des Scancodes aus einer Tabelle im NVRAM.&lt;/p>
&lt;p>Zunächst also haben wir dies entkoppelt, indem wir einen weiteren Puffer für die Scancodes implementiert haben. Der INT0-Interrupt nimmt also nur noch die Scancodes der Tastatur entgegen und stopft sie in einen Puffer. Das Dekodieren der Scancodes haben wir in die Hauptschleife verlegt, denn dieser Vorgang ist nicht zeitkritisch und kann problemlos durch Interrupts unterbrochen werden. Das Ergebnis der Dekodierung landet wie gehabt im Tastaturpuffer.&lt;/p>
&lt;p>Nun ist es so, das ein SPI-Slave nicht wissen kann, wann der Master einen Transfer initiiert. Ergo muss der Slave jederzeit übertragungsbereit sein. Durch ein Bedienen des SPI-Datenregisters SPDR und Warten (polling) auf einen Zustandswechsel des SPI-Interrupt-Flags kann diese Anforderung nicht erfüllt werden. Also müssen wie die SPI-Schnittstelle auch über Interrupt bedienen. Die SPI-ISR-Routine holt also jetzt jedesmal das aktuelle Zeichen oder eben &amp;ldquo;0&amp;rdquo; aus dem Puffer und legt den Wert ins SPI-Datenegister.&lt;/p>
&lt;p>Jetzt gehen auch beim direkten Polling keine Tastendrücke mehr verloren. Nach einigen Optimierungen im Code konnte auch die Taktfrequenz des AVR-Controllers von 8MHz auf 4MHz heruntergesetzt werden.&lt;/p>
&lt;p>Als nächstes wollen wir dem Tastaturcontroller beibringen, wie man Daten zu Tastatur sendet, um etwa die Wiederholrate zu konfigurieren oder die LEDs anzusteuern (Num Lock, Caps Lock, etc.).&lt;/p></content></item><item><title>Echte Zeit</title><link>https://www.steckschwein.de/post/echte-zeit/</link><pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/echte-zeit/</guid><description>Eine batteriegepufferte Echtzeituhr gehört ja heutzutage schon zur Serienausstattung, auch bei Retro-Rechnern. Das Steckschwein soll also auch eine bekommen. Chris Ward&amp;rsquo;s Design, welches uns zu Anfang als Grundlage gedient hat (mittlerweile ist davon nicht mehr viel übrig geblieben) verwendet eine DS1687, deren Intel-mäßiges Businterface über ein wenig Glue-Logik direkt an den Datenbus des 6502 angelegt ist und damit auch Platz im IO-Bereich benötigt.
Wir wollen das mit dem Steckschwein anders angehen.</description><content>&lt;p>Eine batteriegepufferte Echtzeituhr gehört ja heutzutage schon zur Serienausstattung, auch bei Retro-Rechnern. Das Steckschwein soll also auch eine bekommen. &lt;a href="http://www.chrisward.org.uk/6502/schematics/ds1687.gif">Chris Ward&amp;rsquo;s Design&lt;/a>, welches uns zu Anfang als Grundlage gedient hat (mittlerweile ist davon nicht mehr viel übrig geblieben) verwendet eine DS1687, deren Intel-mäßiges Businterface über ein wenig Glue-Logik direkt an den Datenbus des 6502 angelegt ist und damit auch Platz im IO-Bereich benötigt.&lt;/p>
&lt;p>Wir wollen das mit dem Steckschwein anders angehen. Unsere Echtzeituhr soll via SPI angebunden werden. Und auch ansonsten sind unsere Anforderungen eher bescheiden: - Einen Interrupt-Pin soll sie haben - Ein paar Bytes batteriegepuffertes RAM wären toll. - DIL-Gehäuse, sonst passts nicht aufs Steckbrett :-)&lt;/p>
&lt;p>Schlussendlich haben wir uns aus dem breiten Angebot von RTC-Chips mit SPI-Interface die DS1306 von Dallas/Maxim herausgepickt. Lediglich ein externes Uhrenquarz mit 32,768 kHz und 6pF Lastkapazität wird noch gebraucht, was gar nicht so leicht zu beschaffen ist, will man kein SMD. Letztendlich wurde es dann doch ein SMD-Quarz, aber mit Drähten dran, sodass es leicht war, es steckschweinkompatibel zu machen.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Ansonsten ist die DS1306 sehr simpel zu handhaben. Sie bietet 2 Alarme mit jeweils eigenem Interrupt-Pin  (einer active low, einer active high), 2 Taktausgänge (1Hz, 32,768kHz), Möglichkeiten zur Batterie- bzw. Akkupufferung, satte 96 Bytes gepuffertes RAM und ein pipileicht zu handhabendes SPI-Interface.&lt;/p>
&lt;p>&lt;img src="images/img-20141213-wa0004.jpeg" alt="img-20141213-wa0004">&lt;/p>
&lt;p>So war es dann auch ein Leichtes, ein kleines Programm zu schreiben, welches per Interrupt getriggert die Uhrzeit aus der RTC liest und auf dem LCD ausgibt. Der Interrupt, der dies auslöst wird ebenfalls im Sekundentakt von der RTC getriggert. Schneller kann die DS1306 nämlich nicht, eine höhere Auflösung als Sekunden ist nicht möglich. Auch die Tatsache, dass der Chip-Enable-Pin active high ist, ist etwas umständlich. Aber soweit wir das sehen konnten, ist das bei vielen RTC-Chips so. So müssen wir dies entweder Softwaremäßig berücksichtigen, oder das SPI_Select-Signal vorher durch einen Inverter leiten.&lt;/p></content></item><item><title>Eine fanTASTische Reise</title><link>https://www.steckschwein.de/post/eine-fantastische-reise/</link><pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/eine-fantastische-reise/</guid><description>Von unserem Plan, einen AVR-µC als PS/2-Tastaturcontroller als SPI-Slave einzusetzen, haben wir ja schon in der Vergangenheit berichtet. Damals hieß es: &amp;ldquo;Bequemerweise gibt es zahlreiche fertige Lösungen, die z.B. am anderen Ende rs232 sprechen. Wir wollen aber nur wegen einer Tastatur keinen zweiten UART verbauen. Fehlt also nur eine kleine Anpassung auf SPI.&amp;rdquo;
Hiermit sollte das Schicksal seinen Lauf nehmen. Der kühne Griff in die Bastelkiste sollte einen ATtiny2313 zu Tage fördern, welcher der zugedachten Aufgabe durchaus gewachsen zu sein schien.</description><content>&lt;p>Von unserem Plan, einen AVR-µC als PS/2-Tastaturcontroller als SPI-Slave einzusetzen, haben wir ja schon &lt;a href="http://wordpress.steckschwein.de/wordpress/index.php/2014/07/11/tore-zur-welt/">in der Vergangenheit&lt;/a>  berichtet. Damals hieß es: &amp;ldquo;Bequemerweise gibt es zahlreiche fertige Lösungen, die z.B. am anderen Ende rs232 sprechen. Wir wollen aber nur wegen einer Tastatur keinen zweiten UART verbauen. Fehlt also nur eine kleine Anpassung auf SPI.&amp;rdquo;&lt;/p>
&lt;p>Hiermit sollte das Schicksal seinen Lauf nehmen. Der kühne Griff in die Bastelkiste sollte einen ATtiny2313 zu Tage fördern, welcher der zugedachten Aufgabe durchaus gewachsen zu sein schien.&lt;/p>
&lt;p>Als Ausgangsbasis für das Tastaturinterface sollte der Beispielcode aus &lt;a href="http://www.atmel.com/Images/doc1235.pdf">AVR Application Note 313&lt;/a> dienen, der die Scancodes der PS/2-Tastatur nach ASCII umsetzt und per rs232 ausgibt. Dies wäre also die Stelle für die &amp;ldquo;kleine Anpassung auf SPI&amp;rdquo;, leider aber hat der ATtiny2313 anders als ein Controller der ATmega-Reihe keine native SPI-Schnittstelle. Dafür gibt es dort das Universal Serial Interface (USI), mit dem sich auch eine SPI-Schnittstelle nachbilden lassen sollte. Lediglich das SPI-Slave-Select fehlt der USI und muss per Software nachgebaut werden.&lt;/p>
&lt;p>Der PS/2 Controller soll als SPI-Slave genau wie RTC und SD-Karte  angesprochen werden. Hierbei wollen wir den AVR sozusagen als Coprozessor betrachten, der nicht nur das Umsetzen der Scancodes nach ASCII nach einer zu definierenden Keymap übernehmen, sondern auch als Tastaturpuffer dienen soll, sodass das Steckschwein selbst sowas nicht braucht. Das Steckschwein soll bei bei Bedarf also direkt den Controller fragen bzw. warten bis dieser einen Tastendruck liefert.&lt;/p>
&lt;p>Dieser Ansatz brachte nun einige Probleme mit sich. Ein Programm auf dem Steckschwein, dass per SPI den Controller pollte, bekam meist nur Datenmüll zurück. Schrieb man den Puffer voll, und startete dann die Abfrage, kamen diese Daten zumeist korrekt auf dem Steckschwein an.&lt;/p>
&lt;p>Diese Fehlerbild legt nahe, dass das Verarbeiten des CLK-Signals der Tastatur via INT0-Interrupt irgendwie Einfluss auf das Timing der USI hat, zumal das Erhöhen des Taktes des AVR eine kleine Abmilderung bedeutete.&lt;/p>
&lt;p>Was nun folgen sollte war eine mehrwöchige Reihe von frustrierenden Debugging-Sessions, ohne jedoch dass es zu einem schlüssigen Ergebnis kam. Frustrierend insofern, als dass für eine solch trivial anmutende und wenig aufregende Aufgabenstellung max. 2 Tage angesetzt waren.&lt;/p>
&lt;p>Als einzige Erkenntnis blieb zumindest, dass das Erhöhen der Taktfrequenz scheinbar eine leichte Besserung zur Folge hatte. Nur kann der ATtiny &amp;ldquo;nur&amp;rdquo; bis max. 20MHz getaktet werden, und selbst eine leichte Übertaktung auf 22MHz brachte keine vollständige Lösung des Problems. Zudem der Nachgeschmack den der Gedanke auslöste, dass der Tastaturcontroller eines 4MHz Rechners für seine Aufgabe mehr als 5mal so hoch getaktet werden wollte wie der Hauptprozessor.&lt;/p>
&lt;p>Marko und ich verblieben, dass wir das Problem in der nächsten gemeinsamen Session mal geballt betrachten wollten. Ich verkroch mich frustriert im KiCad-Layouteditor.&lt;/p>
&lt;p>Aber: Mir läßt sowas keine Ruhe. Als allerletztes Aufbäumen vor der Kapitulation habe ich beschlossen, den ATtiny in die Bastelkiste zu verbannen, und stattdessen einen ATmega8 mit seinem nativen SPI-Interface auszuprobieren. (Spoiler: Im Post über die RTC sieht man schon den verbauten ATmega8) Schlussendlich schrumpfte so der SPI-Code auf eine Handvoll Zeilen und alle oben beschriebenen Probleme waren schlicht und ergreifend weg! Und das sogar bei einer Taktfrequenz weit unter 22MHz, nämlich genau 4MHz, die nun auch vom internen RC-Oszillator erzeugt werden.&lt;/p>
&lt;p>Was blieb, war etwas Fleißarbeit, um Modifier-Keys wie Ctrl und Alt zu unterstützen und das Tastaturmapping auf deutsches Layout anzupassen. Zusätzlich fängt die Firmware noch Tasten(-kombinationen) wie SysRq und Ctrl-Alt-Del ab, und steuert damit IO-Pins an, sodass man über die Tastatur Reset und NMI auslösen kann.&lt;/p>
&lt;p>Der ATmega8 mutet mit seinen 8k Flash-Speicher natürlich äußerst fett an, aber sicherlich lassen sich diese noch sinnvoll nutzen um etwa mehrere Tastaturmappings unterzubringen. Auch ein PS/2-Mausinterface wäre denkbar.&lt;/p>
&lt;p>Aber aktuell sind wir sehr glücklich, dass wir endlich einen Tastaturcontroller haben, der so funktioniert wie wir das gerne möchten.&lt;/p></content></item><item><title>SPI mit 65c22 VIA</title><link>https://www.steckschwein.de/post/spi-mit-65c22-via/</link><pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/spi-mit-65c22-via/</guid><description>Es gibt verschiedene Ansätze, einem 6502-basierten System SPI beizubiegen. Daryl Rictor hat z.B. einen CPLD-basierten SPI-Controller mit passendem Businterface entwickelt. Meist jedoch wird eine 6522 VIA hergenommen und SPI per Bit Banging implementiert. Auch hier gibt es verschiedenen Ansätze, Andre Fachat hat es mit ein wenig externer Logik sogar geschafft, das Schieberegister der VIA im für SD-Karten nötigen SPI Mode 0 zu betreiben. Normalerweise geht das ja nicht, das das Schieberegister der VIA die Daten nicht vor dem ersten Taktimpuls anlegen kann.</description><content>&lt;p>Es gibt verschiedene Ansätze, einem 6502-basierten System SPI beizubiegen. Daryl Rictor hat z.B. einen &lt;a href="http://sbc.rictor.org/65spi.html">CPLD-basierten SPI-Controller&lt;/a> mit passendem Businterface entwickelt. Meist jedoch wird eine 6522 VIA hergenommen und SPI per Bit Banging implementiert. Auch hier gibt es verschiedenen Ansätze, Andre Fachat hat es mit ein wenig externer Logik sogar geschafft, das Schieberegister der &lt;a href="http://www.6502.org/users/andre/csa/spi/index.html">VIA im für SD-Karten nötigen SPI Mode 0&lt;/a> zu betreiben. Normalerweise geht das ja nicht, das das Schieberegister der VIA die Daten nicht vor dem ersten Taktimpuls anlegen kann.&lt;/p>
&lt;p>Unser Ansatz verwendet den VIA Port B zum Senden. An PB0 liegt der SPI Takt an, an PB7 das Datenbit (MOSI). Die Pins dazwischen dienen als Slave-Select-Leitungen. Der Empfang der Daten vom SPI-Slave (MISO) übernimmt das Schieberegister der VIA, welches extern betaktet werden soll.&lt;/p>
&lt;p>Diese Betriebsart der VIA ist berühmt berüchtigt für einen &lt;a href="http://en.wikipedia.org/wiki/MOS_Technology_6522#Shift_register">Bug&lt;/a>, der dafür sorgen kann, das das Schieberegister ein Bit &amp;ldquo;vergisst&amp;rdquo;, nämlich dann, wenn die fallende Flanke des Systemtakts und die fallende Flanke des Schieberegister-Takts an CB1 zeitlich eng zusammenfallen. In diesem Fall wird die Flanke an CB1 ignoriert, was zum Verlust des entsprechenden Bit führt.&lt;/p>
&lt;p>Mit dem Oszilloskop sehen wir, dass es zwischen den fallenden Flanken beider Takte ausreichend Versatz gibt, sodass wir uns keine Sorgen machen.&lt;/p>
&lt;p>&lt;img src="images/83d46-tekway128_2.gif" alt=""> Versatz von PHI2 (gelb) und SPICLK (blau)&lt;/p>
&lt;p>Jetzt brauchen wir nur noch die Routinen zum Bit-Banging des Ports:&lt;/p>
&lt;p>Diese Routine überträgt das Byte im Akku per SPI. Das empfangene Byte wird anschließend aus dem Schieberegister in den Akku geladen.&lt;/p>
&lt;pre tabindex="0">&lt;code>spi_rw_byte
phx
phy
sta tmp0        ; zu transferierendes byte im akku nach tmp0 retten
ldx #$08
lda via1portb   ; Port laden
and #$fe        ; SPICLK loeschen
asl             ; Nach links rotieren, damit das bit nachher an der richtigen stelle steht
tay              ; bunkern
-
rol tmp0
tya             ; portinhalt
ror             ; datenbit reinschieben
sta via1portb   ; ab in den port
inc via1portb   ; takt an
sta via1portb   ; takt aus
dex
bne -           ; schon acht mal?
lda via1sr      ; Schieberegister auslesen
ply
plx
rts
&lt;/code>&lt;/pre>&lt;p>Da wir eher häufiger lesen als schreiben, gibt es dafür auch noch eine Routine, die nochmal wesentlich schneller arbeitet, da wir uns den Code für das Zerlegen des zu sendenden Bytes ja sparen können. Damit es richtig schnell geht, unrollen wir die Schleife für die Takterzeugung.&lt;/p>
&lt;pre tabindex="0">&lt;code>spi_r_byte
phy
lda via1portb   ; Port laden
AND #$7e   ; * Daten und Takt ausschalten
TAY             ; aufheben
ORA #$01
STA via1portb ; Takt An 1
STY via1portb ; Takt aus
STA via1portb ; Takt An 2
STY via1portb ; Takt aus
STA via1portb ; Takt An 3
STY via1portb ; Takt aus
STA via1portb ; Takt An 4
STY via1portb ; Takt aus
STA via1portb ; Takt An 5
STY via1portb ; Takt aus
STA via1portb ; Takt An 6
STY via1portb ; Takt aus
STA via1portb ; Takt An 7
STY via1portb ; Takt aus
STA via1portb ; Takt An 8
STY via1portb ; Takt aus
lda via1sr
ply
rts
&lt;/code>&lt;/pre>&lt;p>An dieser Stelle vielen Dank an &lt;a href="http://www.vcfe.org/">Hans Franke&lt;/a>, der uns auf die Idee mit SPI gebracht, die Idee mit dem Schieberegister hatte und mit uns die optimierten SPI-Routinen entwickelt hat.&lt;/p></content></item><item><title>Tore zur Welt</title><link>https://www.steckschwein.de/post/tore-zur-welt/</link><pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/tore-zur-welt/</guid><description>Um dem Ziel eines &amp;ldquo;richtigen&amp;rdquo; Computers näher zu kommen, brauchen wir nicht nur einen Videochip, wir brauchen auch Eingabegeräte und Massenspeicher.
Zwar soll unser Rechner so retro sein, dass es ihn damals, zur Hochzeit der 8bit-Heimcomputer, durchaus hätte geben können, realistischerweise wollen wir ihn jedoch mit durchaus modernen Schnittstellen ausstatten. Die 8bit-Rechner aus &amp;ldquo;unserer Zeit&amp;rdquo; haben IO-Chips wie den 6526 oder 6522 benutzt, um Tastatur (Matrix), Joysticks und Massenspeicher anzusteuern. Das haben wir auch vor.</description><content>&lt;p>Um dem Ziel eines &amp;ldquo;richtigen&amp;rdquo; Computers näher zu kommen, brauchen wir nicht nur einen Videochip, wir brauchen auch Eingabegeräte und Massenspeicher.&lt;/p>
&lt;p>Zwar soll unser Rechner so retro sein, dass es ihn damals, zur Hochzeit der 8bit-Heimcomputer, durchaus hätte geben können, realistischerweise wollen wir ihn jedoch mit durchaus modernen Schnittstellen ausstatten. Die 8bit-Rechner aus &amp;ldquo;unserer Zeit&amp;rdquo; haben IO-Chips wie den 6526 oder 6522 benutzt, um Tastatur (Matrix), Joysticks und Massenspeicher anzusteuern. Das haben wir auch vor. Nur etwas anders. Wir verwenden eine 65c22 VIA, und machen sie zu einem &lt;a href="http://de.wikipedia.org/wiki/Serial_Peripheral_Interface">SPI&lt;/a> &amp;ldquo;Master&amp;rdquo;. Damit wollen wir einen wesentlichen Teil der Peripherie anbinden.&lt;/p>
&lt;p>SD-Karten unterstützen SPI direkt, sodass unsere angepeilte Massenspeicherlösung quasi schon fertig ist. Damit ersparen wir es uns, einen irgendwie gearteten Laufwerkscontroller ansteuern zu müssen oder gar über einen Haufen TTL eine IDE-Schnittstelle für alte Platten oder CompactFlash-Karten bauen zu müssen. Der einzige Zusatzaufwand, den wir hardwaremäßig noch betreiben müssen, ist eine 3.3V-Spannungsversorgung und eine Anpassung der 5V-Pegel der VIA auf 3.3V für die SD-Karte, denn SD-Karten laufen mit 3.3V und ihre Eingänge sind nicht 5V-tolerant. Der Rest ist Software.&lt;/p>
&lt;p>In Sachen Tastatur setzen wir auch auf eine Standardschnittstelle, nämlich PS/2. Das ist immer noch retro genug, und PS/2-Tastaturen sind immer noch einfacher zu beschaffen als Matrixtastaturen. Als kleiner Stilbruch bietet sich als Tastaturcontroller ein kleiner AVR-Microcontroller an, der die Scancodes der Tastatur in ASCII-Codes wandelt. Bequemerweise gibt es zahlreiche fertige Lösungen, die z.B. am anderen Ende rs232 sprechen. Wir wollen aber nur wegen einer Tastatur keinen zweiten UART verbauen. Fehlt also nur eine kleine Anpassung auf SPI. Aber zunächst mal die SD-Karte.&lt;/p>
&lt;p>Mit SPI hätten wir darüberhinaus noch viel mehr Möglichkeiten, ohne allzu großen Aufwand weitere SPI-fähige Komponenten wie RTCs, EEPROMS oder vielleicht sogar USB-Hosts anzubinden.&lt;/p>
&lt;p>Der Schaltplan zeigt, wie wir aktuell die VIA nutzen, um eine SD-Karte anzusprechen. Port B stellt die Steuerleitungen, wobei die beiden &amp;ldquo;äußeren&amp;rdquo; Bits 0 und 7 für SPICLK und MOSI verwendet werd, weil sie sich durch Inkrementieren, Dekrementieren bzw. Bit-Shifting schnell ansprechen lassen. Die 6 Bit dazwischen dienen als Slave-Select-Leitungen. MISO geht direkt in CB2, dem Eingang des Schieberegisters der VIA, welcher von PB0 an CB1 extern über unsere SPI-Clock getaktet wird. Damit läuft das Schieberegister exakt in dem Modus, der durch den berühmt berüchtigten VIA-Bug betroffen ist. Wir leben gerne gefährlich. Die Alternative wäre gewesen, ein externes Schieberegister zu benutzen, welches dann Port A belegt hätte. So bleibt dieser frei.&lt;/p>
&lt;p>&lt;a href="https://steckschwein.files.wordpress.com/2014/07/fa076-spi.png">&lt;img src="images/fa076-spi.png" alt="">&lt;/a>&lt;/p></content></item></channel></rss>