<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wdc on</title><link>https://beta.steckschwein.de/categories/wdc/</link><description>Recent content in wdc on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 21 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://beta.steckschwein.de/categories/wdc/index.xml" rel="self" type="application/rss+xml"/><item><title>Chuck Peddle, 1937 - 2019</title><link>https://beta.steckschwein.de/post/chuck-peddle-1937-2019/</link><pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/chuck-peddle-1937-2019/</guid><description>Chuck Peddle, the main designer of the 6502, has passed away on Dec. 15th, 2019.
Peddle was one of the engineers that developed the 6800 at Motorola. He later went to MOS in order to implement his vision of an 8bit CPU for way less than $300, which was Motorola&amp;rsquo;s price for the 6800.
This idea of a cheap but powerful CPU materialized as the 6501, and finally the 6502. That very chip, which started the microcomputer revolution, and on which both Marko and myself began to write our first code ever at an early age.</description><content>&lt;p>Chuck Peddle, the main designer of the 6502, has passed away on Dec. 15th, 2019.&lt;/p>
&lt;p>Peddle was one of the engineers that developed the 6800 at Motorola. He later went to MOS in order to implement his vision of an 8bit CPU for way less than $300, which was Motorola&amp;rsquo;s price for the 6800.&lt;/p>
&lt;p>This idea of a cheap but powerful CPU materialized as the 6501, and finally the 6502. That very chip, which started the microcomputer revolution, and on which both Marko and myself began to write our first code ever at an early age. BASIC at first, followed by assembly language later.&lt;/p>
&lt;p>Learning to code assembly on this small and elegant CPU provided the both of us with profound knowledge and experience about the inner workings of a computer. Knowledge which is still valuable in our respective careers in IT, and also of course when working on our pet project, the Steckschwein. Things would have gone quite different without Chuck Peddle&amp;rsquo;s elegant little CPU.&lt;/p>
&lt;p>Thanks, Chuck!&lt;/p></content></item><item><title>WDC und kein Ende</title><link>https://beta.steckschwein.de/post/wdc-und-kein-ende/</link><pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/wdc-und-kein-ende/</guid><description>In der letzten Zeit war es hier etwas still ums Steckschwein, was aber nicht als Indiz für Untätigkeit gelten soll. Hauptsächlich haben wir uns auf das Schreiben von Code konzentriert, die Shell wurde weiterentwickelt, etc. Darüberhinaus gab es erste Experimente mit CPLDs. Auf dieser Basis sollen ja zukünftige Verbesserungen der Hardware entstehen, begonnen bei einem eigenständigen SPI-Controller bis hin zur Zusammenfassung der bestehenden Glue-Logik rund um die Adressdekodierung. Da ich mir zu diesem Zweck testhalber solche CPLD-Entwicklungsplatinchen auf Basis des XilinX XC9572XL habe kommen lassen, stellte sich also als erstes die Frage, wie sich dessen 3.</description><content>&lt;p>In der letzten Zeit war es hier etwas still ums Steckschwein, was aber nicht als Indiz für Untätigkeit gelten soll. Hauptsächlich haben wir uns auf das Schreiben von Code konzentriert, die Shell wurde weiterentwickelt, etc. Darüberhinaus gab es erste Experimente mit CPLDs. Auf dieser Basis sollen ja zukünftige Verbesserungen der Hardware entstehen, begonnen bei einem eigenständigen SPI-Controller bis hin zur Zusammenfassung der bestehenden Glue-Logik rund um die Adressdekodierung. Da ich mir zu diesem Zweck testhalber solche &lt;a href="http://www.seeedstudio.com/depot/xc9572xl-cpld-development-board-p-799.html">CPLD-Entwicklungsplatinchen auf Basis des XilinX XC9572XL&lt;/a> habe kommen lassen, stellte sich also als erstes die Frage, wie sich dessen 3.3V-basierte Logik mit dem 5V-Steckschwein vertragen würde. Zum CPLD hin wären ja keine Probleme zu erwarten, denn die IO-Pins des XC9572XL sind 5V-tolerant. Die Richtung vom CPLD zum Steckschwein bedarf also besonderer Betrachtung, denn es muss sichergestellt werden, dass alle Bausteine am Bus, die mit dem CPLD verbunden sind, dessen 3.3V-Logikpegel zuverlässig erkennen. Als einzige wirklich problematische Komponente stellte sich hier - &lt;a href="https://beta.steckschwein.de/post/murphy-iii-timing-ist-alles/">wieder mal&lt;/a> - der auf meinem Steckschwein eingesetzte (Marko nutzt einen 65c02 von Rockwell) WDC 65c02 heraus. Das Datenblatt gibt als &amp;ldquo;Input High Voltage&amp;rdquo;, also die Spannung, ab der auf der entsprechenden Leitung (BE, D0 -D7, RDY, /SO, /IRQ, /NMI, PHI2, /RES) eine logische 1 erkannt wird, mit &amp;ldquo;VDD*0.7&amp;rdquo; an. Bei einer Betriebsspannung von 5V also 3,5V. Mit 3.3V-Pegeln also schonmal nicht kompatibel. Geschweige denn mit TTL-Pegeln. Die leider so ziemlich alle auf dem Datenbus liegenden Bausteine verwenden, mit Ausnahme der WDC 65c22 VIA.  Alle anderen Bausteine geben im Datenblatt als &amp;ldquo;High Level Output Voltage&amp;rdquo; Werte von 2.4-2.7V an.  Kann also gar nicht passen. Dass das Steckschwein trotzdem mit dem WDC funktioniert ist ganz offenbar Glück bzw. der Tatsache geschuldet, dass der Chip dann doch toleranter ist als das Datenblatt uns glauben machen will.  Trotzdem nicht sauber. In zukünftigen Revisionen müssen wir also zwischen CPU und Datenbus einen 74HCT245-Buffer eindesignen, der durch TTL-kompatible Eingänge und CMOS-Ausgänge die Pegelunterschiede ausbügelt. Gleiches gilt auch für weitere Experimente mit dem 3.3V-CPLD. Oder auch mit dessen 5V-Vorgänger XC9572.  Zusammenfassend also noch einmal die Besonderheiten des 65c02 von WDC:&lt;/p>
&lt;ol>
&lt;li>Unterschiede im Pinout Pin1 beim WDC ist nicht mehr GND, sondern der Ausgang /VP (Vector Pull), der low wird, wenn die CPU an einen Vektor springt (IRQ, NMI, RESET) Pin 36 ist nur bei WDC /BE, sonst N.C. Dieser muss auf High liegen, sonst ist die CPU vom Bus abgekoppelt. Statt Takt an PHI0 anzulegen und den Rest des Systems mit PHI2 zu takten, wird bei WDC vorgeschrieben, CPU und restliches System mit dem an PHI0 angeschlossenen Oszillator zu takten&lt;/li>
&lt;li>Strafferes Timing Die wesentlich schnelleren WDC-Chips haben wesentlich kürzere Setup/Hold-Zeiten (10ns statt 30ns bei Rockwell)&lt;/li>
&lt;li>Nicht TTL-kompatibel Der WDC 65c02 erwartet wesentlich höhere Signalpegel, die entschieden über den TTL-Pegeln liegen. Dies hat auch &lt;a href="http://lc64.blogspot.de/2015/04/problems-with-wdc-w65c02.html">MrVossi bei der Entwicklung seines LC64&lt;/a> schon festgestellt. Bei ihm hat es sich allerdings deutlicher geäußert.&lt;/li>
&lt;/ol>
&lt;p>Die aktuelle Steckschwein-Revision ist somit trotz aller Bemühungen (Jumper für Takteingang, /BE, /VP) immer noch nicht mit dem WDC 65c02 kompatibel.  Im &lt;a href="https://beta.steckschwein.de/post/murphy-iii-timing-ist-alles/">Beitrag über das erste WDC-Abenteuer&lt;/a> hatte ich abschließend die Frage gestellt, wie man dann einen 65(c)02 in einem vorhandenen alten System mit einem WDC 65c02 ersetzen soll. Die wäre damit dann zumindest beantwortet: &lt;strong>überhaupt nicht!&lt;/strong>&lt;/p></content></item><item><title>Von Hummeln und Puffern</title><link>https://beta.steckschwein.de/post/von-hummeln-und-puffern/</link><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/von-hummeln-und-puffern/</guid><description>Nach dem VCFe ist erstmal nicht viel aktive Entwicklung passiert. Vielmehr haben wir die Erkenntnis, dass wir ein grundsätzliches Timing-Problem haben (danke nochmal an Udo Möller) ein klein wenig sacken lassen. Im Grunde genommen ist es so, wie es sich aus dem vorletzten Post schon herauslesen läßt. Der WDC 65c02 hat eine Data Hold Time von 10ns, während der TMS9929 30ns braucht, sein Zeug vom Bus zu holen. Die verwendeten 16550er UARTs auch.</description><content>&lt;p>Nach dem VCFe ist erstmal nicht viel aktive Entwicklung passiert. Vielmehr haben wir die Erkenntnis, dass wir ein grundsätzliches Timing-Problem haben (danke nochmal an Udo Möller) ein klein wenig sacken lassen. Im Grunde genommen ist es so, wie es sich aus dem vorletzten Post schon herauslesen läßt. Der WDC 65c02 hat eine Data Hold Time von 10ns, während der TMS9929 30ns braucht, sein Zeug vom Bus zu holen. Die verwendeten 16550er UARTs auch. Eine klassische Hold Time Violation also. Ein bisschen muss man sich da schon wundern, dass das Zeug überhaupt funktioniert und so erklärt sich auch der ein oder andere staunende Blick auf dem VCFe. &lt;a href="http://www.ist-schlau.de/">Simon&lt;/a> schlägt vor, das Projekt &amp;ldquo;Bumblebee&amp;rdquo; zu nennen, da Hummeln bekanntlich rein physikalisch gar nicht fliegen können, es aber dennoch tun, weil ihnen Physik total egal ist.&lt;/p>
&lt;p>Wir treffen 3 Entscheidungen:&lt;/p>
&lt;ol>
&lt;li>Wir halten am WDC-Prozessor fest. Die &amp;ldquo;alten&amp;rdquo; Rockwells haben 30ns Hold Time, damit treten die Timingprobleme mit dem TMS9929 kaum auf und das sogar bei 2MHz. Hingegen sind die WDC-Chips weiterhin neu verfügbar, und daran möchten wir uns orientieren.&lt;/li>
&lt;li>Wir brauchen Platinen. Steckbretter bringen bekanntlich ihre ganz eigenen Fehlerquellen mit sich, und Fehlersuche in dem Gestrüpp gestaltet sich zunehmend schwieriger. Zudem ist der TMS9929 mit seinen DRAMs derart empfindlich, das wir spätestens hier nicht um einen stabilen, gelöteten Aufbau herumkommen. Der aktuelle Stand soll also auf einzelne Lochrasterkarten verteilt werden. Diese verbinden wir mit einem einem 50pol. Flachbandkabel (SCSI-2) als &amp;ldquo;Backplane&amp;rdquo;.&lt;/li>
&lt;li>Wir brauchen Puffer. Wir hoffen, die Hold Times dadurch in den Griff zu bekommen, indem wir den Datenbus und die entsprechenden Steuerleitungen puffern. In der Bastelkiste liegen 74ls245, diese sollten es tun. Sinn der Übung ist es, die Verzögerungen aufzufangen, die durch die Adressdekodierung im GAL entstehen und somit 10-15ns Zeit &amp;ldquo;rauszuholen&amp;rdquo;. Datenleitungen, Steuerleitungen und CS-Signale sollten dann keinen nennenswerten Versatz mehr aufweisen. Schaltpläne folgen.&lt;/li>
&lt;/ol></content></item></channel></rss>