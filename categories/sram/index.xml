<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sram on Steckschwein</title><link>https://beta.steckschwein.de/categories/sram/</link><description>Recent content in sram on Steckschwein</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://beta.steckschwein.de/categories/sram/index.xml" rel="self" type="application/rss+xml"/><item><title>Logikanalyse II [UPDATE]</title><link>https://beta.steckschwein.de/post/logikanalyse-ii/</link><pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/logikanalyse-ii/</guid><description>Inzwischen sind die 74F00 eingetroffen und der 74HCT00 durch einen ebensolchen ersetzt. Das Oszilloskopbild sieht gleich deutlich besser aus:
gelb: /WE, blau: A9
Der Schreibvorgang wird also jetzt zumindest abgeschlossen, bevor sich die Adresse auf dem Adressbus ändert. Das ist schonmal viel sauberer.
Nur leider hat es das Problem nicht gelöst, das Steckschwein läuft mit den &amp;ldquo;richtigen&amp;rdquo; RAMs immer noch instabil, was sich insbesondere bei BASIC-Programmen bemerkbar macht:
Wäre auch zu einfach gewesen.</description><content>&lt;p>Inzwischen sind die 74F00 eingetroffen und der 74HCT00 durch einen ebensolchen ersetzt. Das Oszilloskopbild sieht gleich deutlich besser aus:&lt;/p>
&lt;p>&lt;img src="images/tekway449_3.gif" alt=""> gelb: /WE, blau: A9&lt;/p>
&lt;p>Der Schreibvorgang wird also jetzt zumindest abgeschlossen, bevor sich die Adresse auf dem Adressbus ändert. Das ist schonmal viel sauberer.&lt;/p>
&lt;p>Nur leider hat es das Problem nicht gelöst, das Steckschwein läuft mit den &amp;ldquo;richtigen&amp;rdquo; RAMs immer noch instabil, was sich insbesondere bei BASIC-Programmen bemerkbar macht:&lt;/p>
&lt;p>&lt;img src="images/photo_2017-05-04_19-56-29.jpg" alt="photo_2017-05-04_19-56-29">&lt;/p>
&lt;p>Wäre auch zu einfach gewesen.&lt;/p>
&lt;p>&lt;strong>[UPDATE]&lt;/strong> Ein weiterer Test mit anderen 55ns-SRAMs, nämlich Bausteinen von BSI im TSOP28-Gehäuse auf DIP28-Adaptern, lief problemlos durch. Das BASIC-Programm, mit dem wir testen, lief 2 Tage problemlos durch. Dies ist insofern bemerkenswert, als dass das Steckschwein mit diesen Bausteinen vorher überhaupt nicht lief. Also doch ein Erfolg. Warum die 55ns-Chips von Alliance Memory Probleme machen, müssen wir noch untersuchen.&lt;/p>
&lt;p>&lt;img src="images/photo_2017-05-06_19-57-10.jpg" alt=""> TSOP28-SRAMs auf DIP28 Adapter&lt;/p></content></item><item><title>Logikanalyse</title><link>https://beta.steckschwein.de/post/logikanalyse/</link><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/logikanalyse/</guid><description>Auf dem VCFe 18.0 gab es Dank Nick Müller die Möglichkeit, das Steckschwein mal mit einem Logic Analyzer &amp;ldquo;für große Jungs&amp;rdquo; zu untersuchen. Unsere USB-Logic-Analyzer sind zwar für vieles gut, aber um komplett Adress- und Datenbus sowie einschlägiger Steuerleitungen abzuhorchen, fehlen einfach Kanäle, und selbst dann wären sie nicht schnell genug.
Das Steckschwein am Logic Analyzer. im Hintergrund Nicks Finger.
Die Gelegenheit, ein solches Höllengerät (genauer: ein HP 1652B) und mit Nick auch noch jemanden greifbar zu haben, der selbiges beherrscht, gibt uns die Chance, ein merkwürdiges Problem zu untersuchen, welches schon länger Rätsel aufgibt: Die aktuell verwendeten Hyundai-SRAMs sind mit einer Zugriffszeit von 100ns eigentlich viel zu langsam für 8MHz, zumal der 6502 ja nur die 2.</description><content>&lt;p>Auf dem VCFe 18.0 gab es Dank Nick Müller die Möglichkeit, das Steckschwein mal mit einem Logic Analyzer &amp;ldquo;für große Jungs&amp;rdquo; zu untersuchen. Unsere USB-Logic-Analyzer sind zwar für vieles gut, aber um komplett Adress- und Datenbus sowie einschlägiger Steuerleitungen abzuhorchen, fehlen einfach Kanäle, und selbst dann wären sie nicht schnell genug.&lt;/p>
&lt;p>&lt;img src="images/logic_analyzer.jpg" alt=""> Das Steckschwein am Logic Analyzer. im Hintergrund Nicks Finger.&lt;/p>
&lt;p>Die Gelegenheit, ein solches Höllengerät (genauer: ein HP 1652B) und mit Nick auch noch jemanden greifbar zu haben, der selbiges beherrscht, gibt uns die Chance, ein merkwürdiges Problem zu untersuchen, welches schon länger Rätsel aufgibt: Die aktuell verwendeten Hyundai-SRAMs sind mit einer Zugriffszeit von 100ns eigentlich viel zu langsam für 8MHz, zumal der 6502 ja nur die 2. Takthälfte für Buszugriffe nutzt. Diese ist nur 62,5ns lang. Von dieser Zeit geht ausserdem noch die Durchlaufzeit der Adressdekodierung und weiterer Glue-Logik ab. Eigens angeschaffte neue SRAMs von Alliance Memory mit 55ns Zugriffszeit sollten also ganz knapp schnell genug sein. Trotzdem treten mit diesen immer wieder merkwürdig zufällige Abstürze auf, die 100ns-Chips laufen dagegen problemlos.&lt;/p>
&lt;p>Also ran an die Maschine. Hierbei zeigte sich auch schon schnell etwas Merkwürdiges:&lt;/p>
&lt;p>&lt;img src="images/we_addr.png" alt=""> Analyse von Adress- und Datenbus sowie Steuersignale&lt;/p>
&lt;p>Es fiel etwas unangenehm auf, dass die steigende Flanke von /WE (Ende des Schreibzugriffs) direkt mit der Änderung des Adressbus zusammenfällt. Idealerweise sollte der Schreibzugriff beendet sein, bevor am Adressbus eine andere Adresse anliegt. Das Datenblatt nennt die Zeitspanne zwischen der steigenden Flanke von /WE und einer Änderung auf dem Adressbus tWR (Write Recovery Time):&lt;/p>
&lt;p>&lt;img src="images/sram_timing.png" alt="sram_timing">&lt;/p>
&lt;p>Laut Diagramm soll also /WE high werden, &lt;strong>bevor&lt;/strong> sich der Adressbus ändert. Im Datenblatt selbst ist die Write Recovery Time mit 0ns angegeben, und zwar bei beiden SRAMs, die 100ns-Typen sowie bei den 55ns-Bausteinen. Das würde bedeutet, dass die steigende Flanke von /WE mit einer Änderung der Adresse zeitlich zusammenfallen darf. Der verwendete Logicanalyzer hat eine Auflösung von 10ns, sodass man eigentlich nur sagen kann, dass sich /WE und der Adressbus im selben Zeitraum von 10ns ändern. Also schauen wir uns /WE und eine zufällige Adressleitung nochmal unterm Oszilloskop an.&lt;/p>
&lt;p>&lt;img src="images/oszi.jpg" alt=""> /WE und A9 unterm Oszilloskop. Gelb: /WE, Blau: A9&lt;/p>
&lt;p>Offenbar ändert sich der Adressbus, &lt;strong>bevor&lt;/strong> mit der steigenden Flanke von /WE der Schreibzugriff endet! Einen ausreichend schnellen Chip vorausgesetzt, könnte der anliegende Schreibzugriff womöglich in die neue Adresse hereingeschleppt werden. Wie dem auch sei, auf jeden Fall etwas, das so nicht sein darf! Wir halten die 0ns Write Recovery Time nicht ein, indem wir sie um ca. 4ns unterschreiten.&lt;/p>
&lt;p>/OE und /WE für die RAMs wird bei uns durch 3 NAND-Gatter in einem 74HCT00 aus der r/W-Leitung und dem Systemtakt erzeugt. Ein 74HCT00 hat eine Durchlaufzeit von ca. 9ns. Als nächstes werden wir also stattdessen einen 74F00 verwenden, der uns mit 3.7ns Durchlaufzeit wieder in den Bereich tWR &amp;gt; 0ns bringen sollte. Sollte es das nicht bringen, werden wir uns etwas grundsätzlichere Gedanken machen müssen.&lt;/p></content></item><item><title>Schaltplan</title><link>https://beta.steckschwein.de/post/schaltplan/</link><pubDate>Sat, 05 Apr 2014 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/schaltplan/</guid><description>Damit Klarheit darüber herrscht, worum es überhaupt geht, haben wir den Schaltplan in die einzelnen Gruppen (Prozessor+ Freunde, Speicher, UART) zerlegt.
Die aktuelle Stückliste liest sich laut Eagle folgendermaßen:
Part Value Device C1 100n C5/3 C3 1n C-EU025-025X050 C4 10n C-EU025-025X050 C5 10µF CPOL-EUE2,5-6E C6 100n C5/3 C7 100n C5/3 C8 100n C5/3 C12 1µF CPOL-EUE2,5-6E C13 100n C5/3 C14 100n C5/3 C15 100n C5/3 C16 1µF CPOL-EUE2,5-6E C17 1µF CPOL-EUE2,5-6E C18 1µF CPOL-EUE2,5-6E C19 1µF CPOL-EUE2,5-6E IC1 CY62256LL-PC CY62256LL-PC IC3 CY62256LL-PC CY62256LL-PC IC4 NE555 NE555 IC5 28c64 2864 IC6 16550 UART XR-16C550P IC8 74LS06N 74LS06N IC9 GAL22V10 22V10 IC10 MAX232 MAX232 QG1 2MHz XO-14 QG2 1.</description><content>&lt;p>Damit Klarheit darüber herrscht, worum es überhaupt geht, haben wir den Schaltplan in die einzelnen Gruppen (Prozessor+ Freunde, Speicher, UART) zerlegt.&lt;/p>
&lt;p>Die aktuelle Stückliste liest sich laut Eagle folgendermaßen:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Part    &lt;/th>
&lt;th>Value          &lt;/th>
&lt;th>Device&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>C1      &lt;/td>
&lt;td>100n          &lt;/td>
&lt;td>C5/3          &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C3      &lt;/td>
&lt;td>1n            &lt;/td>
&lt;td>C-EU025-025X050&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C4      &lt;/td>
&lt;td>10n            &lt;/td>
&lt;td>C-EU025-025X050&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C5      &lt;/td>
&lt;td>10µF          &lt;/td>
&lt;td>CPOL-EUE2,5-6E&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C6      &lt;/td>
&lt;td>100n          &lt;/td>
&lt;td>C5/3          &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C7      &lt;/td>
&lt;td>100n          &lt;/td>
&lt;td>C5/3          &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C8      &lt;/td>
&lt;td>100n          &lt;/td>
&lt;td>C5/3          &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C12      &lt;/td>
&lt;td>1µF            &lt;/td>
&lt;td>CPOL-EUE2,5-6E&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C13      &lt;/td>
&lt;td>100n          &lt;/td>
&lt;td>C5/3          &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C14      &lt;/td>
&lt;td>100n          &lt;/td>
&lt;td>C5/3          &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C15      &lt;/td>
&lt;td>100n          &lt;/td>
&lt;td>C5/3           &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C16      &lt;/td>
&lt;td>1µF            &lt;/td>
&lt;td>CPOL-EUE2,5-6E&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C17      &lt;/td>
&lt;td>1µF            &lt;/td>
&lt;td>CPOL-EUE2,5-6E&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C18      &lt;/td>
&lt;td>1µF            &lt;/td>
&lt;td>CPOL-EUE2,5-6E&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C19      &lt;/td>
&lt;td>1µF            &lt;/td>
&lt;td>CPOL-EUE2,5-6E&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IC1      &lt;/td>
&lt;td>CY62256LL-PC  &lt;/td>
&lt;td>CY62256LL-PC  &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IC3      &lt;/td>
&lt;td>CY62256LL-PC  &lt;/td>
&lt;td>CY62256LL-PC  &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IC4      &lt;/td>
&lt;td>NE555          &lt;/td>
&lt;td>NE555        &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IC5      &lt;/td>
&lt;td>28c64          &lt;/td>
&lt;td>2864          &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IC6      &lt;/td>
&lt;td>16550 UART    &lt;/td>
&lt;td>XR-16C550P    &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IC8      &lt;/td>
&lt;td>74LS06N        &lt;/td>
&lt;td>74LS06N      &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IC9      &lt;/td>
&lt;td>GAL22V10      &lt;/td>
&lt;td>22V10        &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IC10    &lt;/td>
&lt;td>MAX232        &lt;/td>
&lt;td>MAX232         &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QG1      &lt;/td>
&lt;td>2MHz          &lt;/td>
&lt;td>XO-14&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QG2      &lt;/td>
&lt;td>1.8432MHz      &lt;/td>
&lt;td>XO-14&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R2      &lt;/td>
&lt;td>3.3k          &lt;/td>
&lt;td>R-EU_0204/7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R3      &lt;/td>
&lt;td>1M            &lt;/td>
&lt;td>R-EU_0204/7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R4      &lt;/td>
&lt;td>1M            &lt;/td>
&lt;td>R-EU_0204/7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R5      &lt;/td>
&lt;td>3.3k          &lt;/td>
&lt;td>R-EU_0204/7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R6      &lt;/td>
&lt;td>3.3k          &lt;/td>
&lt;td>R-EU_0204/7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R7      &lt;/td>
&lt;td>3.3k          &lt;/td>
&lt;td>R-EU_0204/7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R8      &lt;/td>
&lt;td>3.3k          &lt;/td>
&lt;td>R-EU_0204/7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R9      &lt;/td>
&lt;td>4.7k          &lt;/td>
&lt;td>R-EU_0204/7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S1      &lt;/td>
&lt;td>DTE6          &lt;/td>
&lt;td>DTE6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>U1      &lt;/td>
&lt;td>65c02          &lt;/td>
&lt;td>G65SC02P&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>U3      &lt;/td>
&lt;td>65c22          &lt;/td>
&lt;td>G65SC22P&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>V1      &lt;/td>
&lt;td>74138N        &lt;/td>
&lt;td>74138N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>V2      &lt;/td>
&lt;td>74LS00N        &lt;/td>
&lt;td>74LS00N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X2      &lt;/td>
&lt;td>RS232          &lt;/td>
&lt;td>F09HP&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="images/28878-cpu.png" alt="CPU">
Der 65c02-Prozessor nebst Oszillator und RESET-Schaltung, welche aus dem Commodore-PET übernommen wurde und dem GAL, der zu Dekodierung des Adressbereichs von $8000 bis $ffff dient. Nicht zu sehen ist der Pull-Up-Widerstand für die BE (Bus Enable)-Leitung der WDC-Variante des 65x02, ohne den der Prozessor in einen Tri-State-Zustand geht und sich vom Bus abkoppelt.&lt;/p>
&lt;p>&lt;img src="images/e4c5e-romram.png" alt="ROMRAM">
Das EEPROM und die beiden 32k SRAM-Bausteine. Etwas schwer zu erkennen: die Adressleitung A15 des Prozessors dient den &amp;ldquo;unteren&amp;rdquo; 32k (IC1) als CS-Signal. Das CS_HIRAM-Signal hingegen erzeugt der GAL (siehe oben). Der Schaltplan unterschlägt, dass wir in Wirklichkeit ein 28c256-EEPROM verwendet haben, welches wir durch auf Masse legen von A14 und A13 auf 8k &amp;ldquo;kastriert&amp;rdquo; haben.&lt;/p>
&lt;p>&lt;img src="images/e0273-uart.png" alt="UART">
Der UART + Glue Logic, um dessen Bus-Interface an das des 65c02 anzupassen. Die Invertierung von RESET und INT(IRQ) übernimmt ein 74ls06. Beim RESET-Signal ist aufgrund dessen Open Collector-Treibers noch ein Pull-Up-Widerstand nötig.&lt;/p>
&lt;p>&lt;img src="images/b3061-rs232.png" alt="rs232">
Der Vollständigkeit halber.&lt;/p>
&lt;p>&lt;img src="images/9ee9c-via.png" alt="VIA"> Die Anbindung der 65x22 VIA gestaltet sich trivial und erweitert unseren kleinen Rechner um vielseitige IO-Möglichkeiten.&lt;/p></content></item></channel></rss>