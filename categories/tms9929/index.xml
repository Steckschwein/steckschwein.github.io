<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tms9929 on Steckschwein</title><link>https://www.steckschwein.de/categories/tms9929/</link><description>Recent content in tms9929 on Steckschwein</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.steckschwein.de/categories/tms9929/index.xml" rel="self" type="application/rss+xml"/><item><title>V9958 - "The WAIT" - investigation of the CPU/VDP /WAIT interface</title><link>https://www.steckschwein.de/post/v9958-the-wait-investigation-of-the-cpu-vdp-wait-interface/</link><pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/v9958-the-wait-investigation-of-the-cpu-vdp-wait-interface/</guid><description>&amp;hellip; on the way back to munich, we had some time to do a little code review of our gfx library. thinking about the cpu to video chip timings and again read the well known datasheets of the V9938/V9958. suddenly i got an enlightenment and we came to the following conclusion.
as described in the datasheet (V9958-Technical-manual_v1.0.pdf) of the V9958 there are different timings given for different kind of writes. so as far as we understand there are the following timings</description><content>&lt;p>&amp;hellip; on the way back to munich, we had some time to do a little code review of our gfx library. thinking about the cpu to video chip timings and again read the well known datasheets of the V9938/V9958. suddenly i got an enlightenment and we came to the following conclusion.&lt;/p>
&lt;p>as described in the datasheet (V9958-Technical-manual_v1.0.pdf) of the V9958 there are different timings given for different kind of writes. so as far as we understand there are the following timings&lt;/p>
&lt;ol>
&lt;li>the first 2 bytes send to vdp during a write are always register writes which require a short delay of at least 2µs in between each byte&lt;/li>
&lt;li>the write of the 3rd byte (after the 2nd) requires a delay of 8µs. any further &amp;ldquo;single byte transfer&amp;rdquo; - during a vram write - also requires the 8µs delay. the same is true if we want to initiate a register write direclty after a vram write.&lt;/li>
&lt;li>the 3rd and n-th byte write to port #3 (index register port) during a bulk register write requires only the 2µs between each byte&lt;/li>
&lt;/ol>
&lt;p>With this in mind, we can optimize our library a little bit by using different &amp;ldquo;nop slides&amp;rdquo; for address setup and vram writes.&lt;/p>
&lt;p>We enhance our vdp.inc and built two macros which provide the different delay we need.&lt;/p>
&lt;pre tabindex="0">&lt;code>.macro vdp_wait_s
jsr vdp_nopslide_2m ; 2m for 2µs wait
...
.macro vdp_wait_l
jsr vdp_nopslide_8m ; 8m for 8µs wait
...
&lt;/code>&lt;/pre>&lt;p>steckSchwein is running at 8Mhz, so we also defined some equations and used ca65 macros to build our nop slides.&lt;/p>
&lt;pre tabindex="0">&lt;code>.define CLOCK_SPEED_MHZ 8
; long delay with 6µ+2µs (below)
MAX_NOPS_8M = (6 * 1000 / (1000 / CLOCK_SPEED_MHZ)) / 2
; 8Mhz, 125ns per cycle, wait 6µs = 6000ns
; = 6000ns / 125ns = 48cl / 2 =&amp;gt; 24 NOP
; short delay with 2µs wait
MAX_NOPS_2M = (2 * 1000 / (1000 / CLOCK_SPEED_MHZ) -12) / 2
; -12 =&amp;gt; jsr/rts = 2 * 6cl = 12cl must be subtract
.macro m_vdp_nopslide
vdp_nopslide_8m:
; long delay with 6+2 2µs wait
.repeat MAX_NOPS_8M
nop
.endrepeat
vdp_nopslide_2m:
.repeat MAX_NOPS_2M
nop
.endrepeat
rts
.endmacro
&lt;/code>&lt;/pre>&lt;p>Another interesting thing would be, &amp;ldquo;how does the /WAIT&amp;rdquo; behave in this situation? the assumption here is, that the /WAIT will behave in the way as specified. so /WAIT will be go low at least after 130ns from CSW. so to handover the /RDY handling to the vdp via the /WAIT pin, we have to apply only 1 wait state from our WS-Gen. after one wait state, we can release the /RDY low from our WS so that the vdp /WAIT can drive /RDY as needed.&lt;/p>
&lt;p>Back home, Thomas did the test and changed the waitstate generator firmware for the GAL16V8.&lt;/p>
&lt;p>The equation was&lt;/p>
&lt;pre tabindex="0">&lt;code>W2 = ROM \* UART \* SND \* /VDP
W1 = W2
+ /ROM \* UART \* VDP
&lt;/code>&lt;/pre>&lt;p>and was changed to&lt;/p>
&lt;pre tabindex="0">&lt;code>W2 = /SND
W1 = W2
+ /ROM ; /ROM wait state if ROM is cs
+ /VDP ; /VDP wait state if VDP is cs
&lt;/code>&lt;/pre>&lt;p>So finally, we only need one wait state from the waitstate generator to access the VDP. If the VDP requires more time - surely - during a video memory access it will drive /WAIT to low as long as needed. So after the explcit 1WS from our wait state generator we now hand over the /RDY control to the VDP. How our /RDY and /WAIT really work together is subject to one of our next sessions where we&amp;rsquo;re going to measure the things with a logic analyzer and oscilloscope. Nevertheless, it works in this way and it works exaclty as specified within the datasheet.&lt;/p></content></item><item><title>V9958 - Es ist vollbracht</title><link>https://www.steckschwein.de/post/v9958-es-ist-vollbracht/</link><pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/v9958-es-ist-vollbracht/</guid><description>Da ist sie nun, die neuen Videoplatine. Nach einigen Umwegen hat der Packen Boards uns erreicht (die erste Lieferung ist versehentlich in Spanien gelandet, während wir die Platinen des spanischen Bastlers erhalten haben. Inzwischen hat jeder Ersatz erhalten).
Wir haben ja bekanntlich unsere Vorgehensweise geändert, indem wir schneller Platinen anfertigen lassen. Aber zu unserer großen Freude funktionierte die erste Platine nach Bestückung auf Anhieb. Selbstverständlich haben sich aber auch ein paar Patzer eingeschlichen.</description><content>&lt;p>Da ist sie nun, die neuen Videoplatine. Nach einigen Umwegen hat der Packen Boards uns erreicht (die erste Lieferung ist versehentlich in Spanien gelandet, während wir die Platinen des spanischen Bastlers erhalten haben. Inzwischen hat jeder Ersatz erhalten).&lt;/p>
&lt;p>Wir haben ja bekanntlich &lt;a href="http://steckschwein.de/2018/03/01/v9958-vom-steckbrett-zum-prototypen/">unsere Vorgehensweise geändert&lt;/a>, indem wir schneller Platinen anfertigen lassen. Aber zu unserer großen Freude funktionierte die erste Platine nach Bestückung auf Anhieb. Selbstverständlich haben sich aber auch ein paar Patzer eingeschlichen.&lt;/p>
&lt;p>&lt;img src="images/finished_board.jpg" alt="finished_board.jpg"> Die bis auf die Chinch-Buchsen fertig aufgebaute Platine&lt;/p>
&lt;p>Zunächst gabs wohl eine Verwechslung bei den Footprints für die Chinch-Buchsen. Unsere vorhandenen Buchsen passen also nicht, nirgends lassen sich passende Buchsen auftreiben. Wieso hat KiCad Footprints, die zu keinen Komponenten passen? Was nicht passt, wird passend gemacht, also müssen die Buchsen wohl etwas bearbeitet werden.&lt;/p>
&lt;p>&lt;img src="images/cinch_fix-e1520965306532.jpg" alt="cinch_fix.jpg"> Passend gemachte Buchse. Der vordere Pin wurde abgeknipst, und der mittlere Pin etwas nach vorne gebogen.&lt;/p>
&lt;p>Nach erfolgreichem Test hat sich dann ein weiteres Problem offenbart.&lt;/p>
&lt;p>&lt;img src="images/photo_2018-03-17_13-58-35.jpg" alt="photo_2018-03-17_13-58-35"> Irgendwie wirken die Farben vertauscht&lt;/p>
&lt;p>Dadurch, dass der V9958 seine Video-Ausgabepins für die Farbkanäle nicht in der Reihenfolge RGB, sondern GRB angeordnet hat, sind im Schaltplan Rot und Blau verwechselt worden. Glücklicherweise gehen die Farbsignale über Koppelkondensatoren an den CXA2075M, sodass der Fix erstmal darin besteht, C9 und C12 über Kreuz einzulöten.&lt;/p>
&lt;p>&lt;img src="images/fixed_board.jpg" alt="fixed_board"> Das Board mit Cinch-Buchsen und Farb-Fix. Fehlt noch die S-Video-Buchse&lt;/p>
&lt;p>Oh, und es soll nicht unerwähnt bleiben, dass wir uns erstmals getraut haben, mit dem CXA2075M einen SMD-Chip zu verbauen.&lt;/p></content></item><item><title>Es wird wieder gesteckt</title><link>https://www.steckschwein.de/post/es-wird-wieder-gesteckt/</link><pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/es-wird-wieder-gesteckt/</guid><description>Wir haben uns schon länger ein Upgrade des Videochips des Steckschweins vorgenommen. Der TMS9929 ist ein netter Chip, aber an einem 8MHz-65c02, der dazu noch so coole Hardware-Features hat, fühlt er sich ein bisschen wie die Achillesferse an.
Zum Glück war beim TMS9929 nicht Schluss, denn dieser hat im Laufe der Zeit diverse Nachfolger bekommen, welche von Yamaha hergestellt wurden und in diversen Weiterentwicklungen des MSX-Standards Verwendung fanden.
Der direkte Nachfolger der TMS99xx-Reihe ist der V9938.</description><content>&lt;p>Wir haben uns schon länger ein Upgrade des Videochips des Steckschweins vorgenommen. Der TMS9929 ist ein netter Chip, aber an einem 8MHz-65c02, der dazu noch so coole Hardware-Features hat, fühlt er sich ein bisschen wie die Achillesferse an.&lt;/p>
&lt;p>Zum Glück war beim TMS9929 nicht Schluss, denn dieser hat im Laufe der Zeit diverse Nachfolger bekommen, welche von Yamaha hergestellt wurden und in diversen Weiterentwicklungen des MSX-Standards Verwendung fanden.&lt;/p>
&lt;p>Der direkte Nachfolger der TMS99xx-Reihe ist der &lt;a href="https://en.wikipedia.org/wiki/Yamaha_V9938">V9938&lt;/a>. Dieser kam 1984 raus, also ganze 7 Jahre nachdem der TMS9918/9929 erschienen ist, und hat dementsprechend auch einiges mehr drauf, z.B.:&lt;/p>
&lt;ul>
&lt;li>ein 80x24 Zeichen-Textmodus&lt;/li>
&lt;li>maximale Auflösung von 512 × 212 (16 Farben von 512)&lt;/li>
&lt;li>32 Sprites, davon max. 8 auf einer Rasterzeile&lt;/li>
&lt;li>Hardwarebeschleunigtes Füllen, Linien ziehen, etc.&lt;/li>
&lt;li>Vertikales Scrollregister&lt;/li>
&lt;/ul>
&lt;p>Der Nachfolger des V9938 wiederum ist der &lt;a href="https://en.wikipedia.org/wiki/Yamaha_V9958">V9958&lt;/a> von 1988. Dieser hat gegenüber dem Vorgänger nur einige kleine Verbesserungen erhalten, und zwar unter anderem:&lt;/p>
&lt;ul>
&lt;li>Horizontales Scrollregister&lt;/li>
&lt;li>Hardwarebeschleunigtes Füllen, Linien ziehen, etc. auch in nicht-bitmap-Modi&lt;/li>
&lt;/ul>
&lt;p>Beide Chips können bis zu 192k DRAM adressieren, und zwar max. 128k Video-RAM + 64k Extended RAM. Es werden DRAMs in den Formaten 16Kx1b, 16Kx4b, 64Kx1b und 64Kx4b unterstützt.&lt;/p>
&lt;p>&lt;img src="images/img_3129-e1512817894665.jpg" alt="img_3129.jpg">&lt;/p>
&lt;p>Unser Testaufbau &amp;ldquo;begnügt&amp;rdquo; sich mit 2x 64Kx4b und damit insgesamt 64Kb Video RAM (der TMS9929 kann nur max. 16K). Verglichen mit dem TMS9929 funktioniert das DRAM-Interface des V9958 selbst auf dem Steckbrett so stabil, dass wir auf irgendwelche SRAM-basierten Lösungen verzichten können. Auch der weitere Aufbau ist eher übersichtlich. Da der V9958 direkt RGB liefert, ist keine aufwendige Aufbereitung des Videosignals nötig. Als Ausgangsstufe wird ein Sony CXA2075M eingesetzt, der nebenher auch S-Video und Composite erzeugt. Damit dürfte sich künftig die Zahl der Steckschwein-geeigneten Fernseher/Monitore drastisch erhöhen.&lt;/p>
&lt;p>Jetzt bleiben noch einige Detailfragen des Businterface zu klären. Wie &lt;a href="http://lc64.blogspot.de/2015/04/v9938-with-rgb-output.html">MrFossi1&lt;/a> schon festgestellt hat, lassen sich Datentransfers ins Videoram nicht mehr in hoher Geschwindigkeit durchführen, während der Videochip im Blank ist oder das Display deaktiviert. Beim TMS9929 war das möglich.&lt;/p>
&lt;p>Der V9958 hingegen verfügt allerdings über einen ominösen /WAIT-Pin, dessen Funktion allerdings erst per Software aktiviert werden muss. Das Datenblatt erwähnt die Wait-Funktion nur kurz als Möglichkeit, Zugriffe aufs VRAM zu beschleunigen, schweigt sich dann aber aus. Hier gilt es zu forschen.&lt;/p></content></item><item><title>Ein Spiel entsteht...</title><link>https://www.steckschwein.de/post/ein-spiel-entsteht/</link><pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/ein-spiel-entsteht/</guid><description>Im Chrome Browser gibt es einen netten Zeitvertreib in Form des Games &amp;ldquo;Dinosaur&amp;rdquo;. Das Spiel wird immer dann eingeblendet, wenn keine Internet-Verbindung verfügbar ist. Das Spiel ist sehr einfach aufgebaut, kann aber leicht süchtig machen und ist ein netter Zeitvertreib bis die Verbindung wieder verfügbar ist. Genau diese Einfachheit der Grafik und des Gameplays brachte mich auf die Idee das Spiel für das Steckschwein umzusetzen. Wie ich dabei vorgegangen bin, möchte ich Euch hier schildern.</description><content>&lt;p>Im Chrome Browser gibt es einen netten Zeitvertreib in Form des Games &amp;ldquo;Dinosaur&amp;rdquo;. Das Spiel wird immer dann eingeblendet, wenn keine Internet-Verbindung verfügbar ist. Das Spiel ist sehr einfach aufgebaut, kann aber leicht süchtig machen und ist ein netter Zeitvertreib bis die Verbindung wieder verfügbar ist. Genau diese Einfachheit der Grafik und des Gameplays brachte mich auf die Idee das Spiel für das Steckschwein umzusetzen. Wie ich dabei vorgegangen bin, möchte ich Euch hier schildern.&lt;/p>
&lt;p> 
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/0BUbUgMIjIY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/p>
&lt;h3 id="vorbereitung">Vorbereitung&lt;/h3>
&lt;p>Zunächst habe ich einige Zeit mit &amp;ldquo;zocken&amp;rdquo; verbracht, um das Gameplay genau zu studieren.&lt;/p>
&lt;h3 id="grafik">Grafik&lt;/h3>
&lt;p>Die Grafik habe ich direkt aus dem Spiel genommen. Was heißt das? Nichts besonderes, ich habe Screenshots gemacht, die Grafik vergrößert, den Farbraum reduziert und die Feinheiten mit einem IconMaker-Tool bearbeitet. Wichtig war mir, dass ich die Assets im Bild-Format XPM speichern konnte.&lt;/p>
&lt;p>So habe ich nach und nach, den Dino, die Kakteen, den Hintergrund und die Wolken in XPM gegossen. Vielleicht etwas umständlich, da die Sprites auch direkt auf &lt;a href="https://chromium.googlesource.com/chromium/src.git/">https://chromium.googlesource.com/chromium/src.git/&lt;/a> verfügbar sind.&lt;/p>
&lt;p>Nimmt man die Sprites in Originalgröße wird der Dino auf dem TMS9918/29 riesig sein, denn wir haben ja nut 192 Pixel vertikal zur Verfügung. Ich habe die Grafik daher entsprechend skaliert, damit diese für das Steckschwein eine sinnvolle Größe hat.&lt;/p>
&lt;p>Mit dem Icon-Tool ging das wunderbar und ich habe so entsprechende xpm-Dateien für die Grafik erstellt. Diese konnte ich dann leicht mittels ein paar einfacher Shell-Befehle in eine Acme-Assembler Source-Datei konvertieren. Die Grafik steht also zur Verfügung.&lt;/p>
&lt;p>Für den Dino werden Sprites verwendet, es kommen dabei 2x2 Sprites mit 16x16px zum Einsatz.&lt;/p>
&lt;p>Die vorbeiziehenden Wolken werden ebenfalls mit Sprites realisiert, wobei jede Wolke aus 2 Sprites nebeneinander liegenden Sprites besteht. Die Wolken werden mit 1px/frame bewegt.&lt;/p>
&lt;p>Jetzt fehlt noch der Hintergrund, also die Wüste, Berge und natürlich die Hindernisse in Form der Kakteen.&lt;/p>
&lt;p>Mit Sprites kann man den Hintergrund auch nicht realisieren, da man mit 4 Sprites keinen ganzen Bildschirm voll bekommt. Es sind ja nur 4 Sprites pro Scanline erlaubt.&lt;/p>
&lt;p>Daher kann es nur Cursor-Grafik sein. Damit das ganze aber &amp;ldquo;smooth&amp;rdquo; scrollt muss man sich was überlegen.&lt;/p>
&lt;h3 id="soft-scrolling">Soft-Scrolling&lt;/h3>
&lt;p>Das größte Problem beim TMS9918/TMS9929 ist, dass dieser kein Soft-Scrolling für Cursor-Grafik (mode1/mode2) unterstützt. Damit das ganze also &amp;ldquo;smooth&amp;rdquo; scrollt müsste man pro Frame ein Zeichen verschieben. Bei 50Hz (PAL) Steckschwein, sind das 400 Pixel pro Sekunde. Das ist viel zu schnell und nicht spielbar!&lt;/p>
&lt;p>Nach ein paar Tests habe ich mich für 4px/frame entschieden, dass sind 200 Pixel pro Sekunde und damit gut 3/4 des Screens. Das ist nahezu optimal und macht das Game spannend.&lt;/p>
&lt;p>Aber wie kann ich jetzt 4 Pixel Soft-Scrolling realisieren?&lt;/p>
&lt;p>Für das 4px Soft-Scrolling werden 2 Paletten der Cursor-Grafik erstellt, wobei bei einer Palette die Grafik um exakt 4 Pixel nach links versetzt ist. Nach dem 1. Frame schalte ich einfach die 2. Palette ein. Das passiert über Video-Register 4 des TMS9929.&lt;/p>
&lt;p>lda #(.A_GX_PAT_2 / $800) ;VRAM-Adresse schreiben sta a_vreg&lt;/p>
&lt;p>lda #$84               ;Gfx-Register 4 -&amp;gt; $80 für write, 4 für 4. Registersta a_vreg&lt;/p>
&lt;p>Nach dem 2. Frame schalte ich wieder auf die 1. Palette und anschließend kopiere ich die Zeichen auf dem Bildschirm um eine Cursor-Position (8px) nach links. So erhält man ein butterweiches 4px/frame Scrolling, womit man arbeiten kann. Will man 3px/frame soft scrollen wird&amp;rsquo;s schon eklig, da man hier 7 Paletten benötigt. Man würde ja eine Palette benötigen die 3px verschoben ist, dann eine mit 6px, dann eine mit 9px was also eine Palette mit 1px Versatz entspricht, denn die 8px werden umkopiert. Dann eine mit 4px - die haben wir ja schon - usw&amp;hellip; 2px/frame ist wieder einfach, da braucht man wieder &amp;ldquo;nur&amp;rdquo; 4 Paletten ;)&lt;/p>
&lt;h3 id="steuerung">Steuerung&lt;/h3>
&lt;p>Gespielt wird über Joystick in Port 2, der Code dafür die Abfrage ist einfach.&lt;/p>
&lt;p>lda #PORT_SEL_2 ;port 2, Joystick-Port 2 einschalten sta via1porta lda via1porta ;Port lesen und entsprechend vergleichen and #JOY_UP&lt;/p>
&lt;p>Mit Joystick nach oben springt der Dino, mit Joystick nach unten duckt sich dieser ab. Der jeweilige Zustand des Dinos wird in einem ZP-Speicherplatz abgelegt und darauf reagiert dann die Animations-Routine.&lt;/p>
&lt;p>In dieser wird auf den Status reagiert und die Sprite-Pointers des Dinos entsprechend verändert.&lt;/p>
&lt;h3 id="gameplay">Gameplay&lt;/h3>
&lt;p>Nach starten des Spiels mit &amp;ldquo;Feuer&amp;rdquo; gehts also los, der Dino wird animiert, dabei werden alle paar Frames die Sprite-Pointer des Dinos geändert. Dadurch entsteht der Eindruck wie im Original, das der Dino durch die Wüste rennt.&lt;/p>
&lt;p>Das Scrolling erfolgt wie oben beschrieben, nach jedem 2. Frame sind genau 8 Pixel nach links verschoben. Am rechten Rand entsteht eine Lücke. Hier kommt der Level-Generator zum Einsatz.&lt;/p>
&lt;p>Der Level-Generator geht eine konfigurierte Liste von 0 und 1 durch. Eine 0 in der Liste bedeutet, es soll eine Wüste- oder Berg-Gruppe ausgegeben werden. Eine 1 bedeutet, es soll eine Kakteen-Gruppe ausgegeben werden. Die Auswahl ob Wüsten- oder Berg-Gruppe erfolgt per Zufall. Die Ausgabe einer der 4 Kakteen-Gruppen erfolgt ebenfalls per Zufall.&lt;/p>
&lt;p>Per Zufall wird lediglich der Offset berechnet, womit dann aus einer Adresstabelle die einzelnen Hintergrund-Gruppen selektiert werden kann. Da jede Hintergrund-Gruppe unterschiedlich lang sein kann, ist das 1. Byte reserviert und gibt die &amp;ldquo;Skript&amp;rdquo;-Länge an.&lt;/p>
&lt;h3 id="scoreboard">Scoreboard&lt;/h3>
&lt;p>Das Scoreboard besteht wie im Original aus dem 5-stelligen Highscore und dem aktuellem Score des Spiels.&lt;/p>
&lt;p>Der aktuelle Score wird alle 5 Frames erhöht, so dass man nach 1 Sekunde spielen 10 Punkte/Meter zurückgelegt hat. Es werden 3 Byte pro Score verwendet.&lt;/p>
&lt;p>sed                ;add in decimal mode
lda .score_value+2
clc
adc #$01
sta .score_value+2
bcc +
adc .score_value+1
sta .score_value+1
bcc +
adc .score_value
sta .score_value&lt;/p>
&lt;ul>
&lt;li>cld&lt;/li>
&lt;/ul>
&lt;h3 id="gezählt-wird-einfach-im-bcd-mode-des-65c02-unter-berücksichtigung-des-übertrags">Gezählt wird einfach im BCD-Mode des 65c02 unter Berücksichtigung des Übertrags.&lt;/h3>
&lt;h3 id="die-ausgabe-erfolgt-des-score-erfolgt-über-abbilden-des-dezimalwertes-jeder-stelle-auf-numerische-zeichen-der-ascii-tabelle-da-ich-beim-scrolling-permanent-die-palette-umschalte-liegt-der-zeichensatz-quasi-in-jeder-palette-vor-hier-natürlich-ohne-verschiebung-der-pixel">Die Ausgabe erfolgt des Score erfolgt über Abbilden des Dezimalwertes jeder Stelle auf numerische Zeichen der ASCII-Tabelle. Da ich beim Scrolling permanent die Palette umschalte liegt der Zeichensatz quasi in jeder Palette vor, hier natürlich ohne Verschiebung der Pixel!&lt;/h3>
&lt;p>lda .score_value
jsr .digit_out
&amp;hellip;
.digit_out
and #$0f
ora #&amp;lsquo;0&amp;rsquo;
sta a_vram
rts&lt;/p>
&lt;h3 id="wie-gehts-weiter">Wie gehts weiter?&lt;/h3>
&lt;p>Nach dem Update meines Chromes, gab es plötzlich auch einen Pterodactylus der mir im Chrome nach einiger Zeit spielen entgegen geflogen kam. Das hab ich vorher noch nicht gehabt, muss also mit dem letzten Update zu tun gehabt haben. Ich bin dran&amp;hellip;&lt;/p></content></item><item><title>Filesystem und Shell</title><link>https://www.steckschwein.de/post/filesystem-und-shell/</link><pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/filesystem-und-shell/</guid><description>Vor kurzem haben wir ja schon von ersten Gehversuchen einer FAT32-Implementation berichtet, mit der wir in der Lage waren, beim Systemstart eine Datei von SD-Karte zu laden.
Was fehlt, ist eine Möglichkeit, innerhalb eines Filesystems einer SD-Karte zu navigieren, Programme zu laden oder Dateien anzuzeigen. Um diese Lücke zu füllen, ist die SteckShell entstanden. In der aktuellen Version 0.6 unterstützt die Shell folgende Funktionen:
Directory auflisten Directory wechseln Programm laden und starten Datei anzeigen Grafik (TMS9929-Rohdaten) anzeigen Wer auf dem VCFe 16.</description><content>&lt;p>&lt;a href="http://wordpress.steckschwein.de/wordpress/index.php/2015/01/05/bootschwein/">Vor kurzem&lt;/a> haben wir ja schon von ersten Gehversuchen einer FAT32-Implementation berichtet, mit der wir in der Lage waren, beim Systemstart eine Datei von SD-Karte zu laden.&lt;/p>
&lt;p>Was fehlt, ist eine Möglichkeit, innerhalb eines Filesystems einer SD-Karte zu navigieren, Programme zu laden oder Dateien anzuzeigen. Um diese Lücke zu füllen, ist die SteckShell entstanden. In der aktuellen Version 0.6 unterstützt die Shell folgende Funktionen:&lt;/p>
&lt;ul>
&lt;li>Directory auflisten&lt;/li>
&lt;li>Directory wechseln&lt;/li>
&lt;li>Programm laden und starten&lt;/li>
&lt;li>Datei anzeigen&lt;/li>
&lt;li>Grafik (TMS9929-Rohdaten) anzeigen&lt;/li>
&lt;/ul>
&lt;p>Wer auf dem VCFe 16.0 anwesend war konnte diese Shell auch in Aktion erleben.&lt;/p>
&lt;p>Dank Marko unterstützt die Shell inzwischen sogar den 40-Zeichen-Modus des TMS99xx!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Die Shell liegt nicht im ROM, sondern wird entweder seriell aufs Steckschwein geladen oder mit dem beschriebenen boot-Mechanismus von SD-Karte gestartet.&lt;/p>
&lt;p>Mit ihr fühlt sich das Steckschwein schon wie ein &amp;ldquo;richtiger&amp;rdquo; Computer an, denn jetzt ist eine interaktive Bedienung möglich.&lt;/p>
&lt;p>Die SteckShell dient uns sozusagen als Betriebsystem-Keimzelle, in der u.a. die FAT-Routinen reifen. Hier hat sich seit unserem rudimentären ROM-Bootloader auch einiges getan.&lt;/p>
&lt;p>Die ersten Versuche mit FAT, die auch in den allerersten Versionen der Shell noch Verwendung fanden, bestanden darin, über das Verzeichnis zu iterieren, eine Datei nach Namen oder Attribut zu finden und dann mit ihr etwas zu machen.&lt;/p>
&lt;p>Dieser Ansatz funktioniert jetzt immer noch als ROM-Bootloader, aber für die Shell sind die Anforderungen etwas andere. Man möchte eine Datei vielleicht auch nur erst in den Speicher laden, um dann zu entscheiden, was als nächstes passieren soll. Man möchte evtl. mehrere Dateien geöffnet haben, oder zumindest das aktuelle Verzeichnis und eine Datei geöffnet haben können.&lt;/p>
&lt;p>Ehe man sich versieht, befindet man sich inmitten der gleichen Überlegung, die vor einigen Jahrzehnten schon mal jemand angestellt hat, und sich dann das klassische und bekannte Interface bestehend aus open(), close(), read() usw. ausgedacht hat.&lt;/p>
&lt;p>Also wurde das Ganze in Subroutinen fat_mount, fat_open, etc. aufgedröselt.&lt;/p>
&lt;p>fat_open und fat_close verwalten eine Filedeskriptortabelle.&lt;/p>
&lt;p>fat_open bekommt einen Dateinamen als Argument und sucht diesen im aktuellen Verzeichnis. Der Startcluster und die Größe der gefundenen Datei wird in die Deskriptortabelle geschrieben. Die Adresse dieses Eintrags ist der File-Handle.&lt;/p>
&lt;p>Mit diesem kann nun fat_read die geöffnete Datei in den Speicher einlesen. Dies geschieht bei der Gelegenheit nun per SD-Multiblock-Transfer, sodass ein ganzer Cluster in einem Stück ohne Overhead durch Zwischenberechnungen der Sektornummern eingelesen werden kann.&lt;/p>
&lt;p>Das gesamte &amp;ldquo;Interface&amp;rdquo; hantiert nur mit Clusteradressen, die Berechnung der LBA-Adressen passiert intern.&lt;/p>
&lt;p>Damit haben wir eine für unsere Zwecke erst einmal ausreichende Filesystem-Implementation.&lt;/p>
&lt;p>Aktuell können wir noch keine eigentlichen &amp;ldquo;FAT&amp;rdquo;-Lookups, d.h. wir können nur mit Dateien und Verzeichnissen umgehen, die in einen Cluster passen, was jedoch bei einer Clustergröße von 32k bei einer 4GB-Karte auf einem 8-bit-System keine große Einschränkung darstellt. Spätestens wenn wir so etwas wie seek() und damit sequentiellen Zugriff auf Dateien implementieren werden wir uns auch daran setzen müssen.&lt;/p>
&lt;p>Die Shell verfügt außerdem über die Fähigkeit, die Textkonsole zu scrollen. In diesem Fall allerdings nicht über die Möglichkeiten des VDP, sondern das Textscrolling wird im regulären Arbeitsspeicher durchgeführt und der &amp;ldquo;Bildschirminhalt&amp;rdquo; während des VDP-Blank ins RAM des TMS9929 geschrieben. Dies würde sogar ermöglichen, verschiedene umschaltbare Textkonsolen a la Linux (Alt-F1..n) zu realisieren. Aber über diesen Mechanismus darf sich Marko gerne auslassen.&lt;/p></content></item><item><title>TMS9929 Composite Video und RGB+H/Y</title><link>https://www.steckschwein.de/post/tms9929-composite-video-und-rgbhy/</link><pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/tms9929-composite-video-und-rgbhy/</guid><description>Damit Dommas nicht langweilig wird und auch in den Gfx-Genuss kommt muss natürlich eine Lösung her. Er hat momentan keine Möglichkeit das Steckschwein mit Grafik an seinem geliebten Commodore 1084-S Monitor zu betreiben. Was ist also zu tun?
Wir haben ja im Post &amp;hellip; beschrieben wie wir aus dem YRyBy des TMS9929 ein brauchbares RGB+Sync (BAS) Signal erzeugen können. Das funktioniert auch wunderbar an allen derzeit gängigen CRT-Fernsehern und auch an allen neuzeitlichen Flat-Screens wenn diese noch einen SCART-Anschluss oder ebend RGB+Sync (PAL-RGB) Eingänge besitzen.</description><content>&lt;p>Damit Dommas nicht langweilig wird und auch in den Gfx-Genuss kommt muss natürlich eine Lösung her. Er hat momentan keine Möglichkeit das Steckschwein mit Grafik an seinem geliebten Commodore 1084-S Monitor zu betreiben. Was ist also zu tun?&lt;/p>
&lt;p>Wir haben ja im Post &amp;hellip; beschrieben wie wir aus dem YRyBy des TMS9929 ein brauchbares RGB+Sync (BAS) Signal erzeugen können. Das funktioniert auch wunderbar an allen derzeit gängigen CRT-Fernsehern und auch an allen neuzeitlichen Flat-Screens wenn diese noch einen SCART-Anschluss oder ebend RGB+Sync (PAL-RGB) Eingänge besitzen. Am 1084-S geht aber nur RGB+H/V, d.h. das horizontale und vertikale Sync-Signal muss getrennt vorliegen. Wir haben aber nur ein Composite-Sync mit dem RGB+S vorliegen. Wir brauchen einen Sync-Separator. Genau das macht der LM1881 und kompatible.&lt;/p>
&lt;p> &lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>Problem&lt;/strong>: &lt;strong>Die Schaltung funktioniert nicht, zumindest nicht am Monitor 1084S&lt;/strong>&lt;/p>
&lt;p>Damit gehts also nicht, das erzeugte SYNC taugt dem 1084S nicht, wir bekommen kein Bild, sondern nur geflimmer.&lt;/p>
&lt;p>Den 1084S nochmal genau angeschaut, um dann festzustellen, dass der ja eigentlich auch nur ein Fernseher ist. Mit dem Eingang CVBS/L und dem Umschalter am Front-Panel CVBS/RGB lässt sich der 1084S mit dem analogen RGB-Signal über die DIN-Buchse und zusätlzich dem SYNC-Signal am CVBS/L betreiben. Wir machen einen Test und es funktioniert, wir bekommen ein super Bild.&lt;/p>
&lt;p>Da wir jetzt aber ein völlig unkonventionelles Kabel benutzen, wir aber als Ziel einen 1-Platinenrechner haben der kompatibel zum Rest der Welt sein soll, entschließen wir uns noch die fehlende SCART-Buchse am 1084S nazurüsten. Dazu muss lediglich eine entsprechende SCART-Buchse eingebaut werden und die RGB-Pins am &lt;a href="http://de.wikipedia.org/wiki/SCART">SCART&lt;/a> - Pin 7 (blau), Pin 11 (grün), Pin 15 (rot) - mit dem bereits vorhandenen RGB-Anschlüssen der RGB DIN-Buchse des 1084S verbinden. Zum Glück ist dies nicht erforderlich, denn auch bei der 1084S Baureihe ohne SCART-Buchse ist dies bereits vorgesehen. Wir müssen uns lediglich Gedanken um das (F)BAS/Video-SYNC machen, was an Pin 20 der SCART-Buchse anliegt. Das SYNC muss im 1084S, wie oben bereits erwähnt, mit dem CVBS/L Cinch-Eingang verbunden werden.&lt;/p>
&lt;p>Im folgenden Schaltplan eines 1084S Models mit SCART-Buchse kann man diesen Signalpfad deutlich erkennen.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Wie auch immer, in unseren 1084S ohne SCART-Buchse ist dieser Pfad nicht verbunden. Dazu kommt das Problem, dass der Schalter CVBS/RGB im Front-Panel lediglich CVBS am Cinch-Eingang oder ebend RGB über die DIN-Buchse zulässt.&lt;/p>
&lt;p>Schaltet man auf RGB wird über den Transistor TS509 der Video-Eingang über Cinch kurzgeschlossen, den es soll ja das H-/V-Sync der DIN-Buchse verwendet werden, was mit dem LM1881 und oben beschriebenen Ansatz nicht funktioniert hat.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Also ziehen wir die Basis des TS509 kurzerhand auf Masse, so dass quasi der CVBS/RGB Schalter das Video-Signal nicht mehr kurzschließen kann und wir unser SYNC via Cinch oder ebend jetzt über SCART zusammen mit dem RGB am SCART in den 1084S speisen können.&lt;/p>
&lt;p>Wir schrauben den 1084S wieder zusammen und sind zufrieden, immerhin haben wir jetzt ein Super Bild und einen SCART-Anschluss für den 1084S.&lt;/p>
&lt;p>&lt;a href="https://steckschwein.files.wordpress.com/2014/07/d39ce-1084s_scart_rgb.jpeg">&lt;img src="images/d39ce-1084s_scart_rgb.jpeg" alt="">&lt;/a>&lt;/p></content></item><item><title>TMS9929 - Wir wollen was sehen...</title><link>https://www.steckschwein.de/post/tms9929-wir-wollen-was-sehen/</link><pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate><guid>https://www.steckschwein.de/post/tms9929-wir-wollen-was-sehen/</guid><description>&amp;hellip; und zwar auf einem Bildschirm! Aber wie stellt man sowas an?! Nun, wir schauen uns um, was Ende der 70-er bzw. Anfang der 80-er Jahre Stand der Technik war und was sich mit überschaubarem Aufwand an eine 6502 CPU &amp;ldquo;anschließen&amp;rdquo; lässt. Die Auswahl ist leider überschaubar, denn es sollte irgendwas in DIP maximal noch SDIP sein und dazu noch irgendwie lieferbar - &amp;ldquo;new old stock&amp;rdquo;.
Wir fanden die TMS9918/28/29-Serie und einige Nachfolger wie den TMS9938/58.</description><content>&lt;p>&amp;hellip; und zwar auf einem Bildschirm! Aber wie stellt man sowas an?! Nun, wir schauen uns um, was Ende der 70-er bzw. Anfang der 80-er Jahre Stand der Technik war und was sich mit überschaubarem Aufwand an eine 6502 CPU &amp;ldquo;anschließen&amp;rdquo; lässt. Die Auswahl ist leider überschaubar, denn es sollte irgendwas in DIP maximal noch SDIP sein und dazu noch irgendwie lieferbar - &amp;ldquo;new old stock&amp;rdquo;.&lt;/p>
&lt;p>Wir fanden die TMS9918/28/29-Serie und einige Nachfolger wie den TMS9938/58. Für&amp;rsquo;s erste sollte es ein TMS9929 sein, weil der tatächlich noch zu beschaffen ist und dazu auch noch im DIP-Gehäuse daherkommt. Der -29 ist für den europäischen Markt gebaut worden, um diese an PAL-Fernsehgeräte anschließen zu können. Hier eine kleiner Auszug  der technischen Fähigkeiten, die im &lt;a href="http://msx.hansotten.com/uploads/ffiles/1980%20TMS9918%20Advertisement.jpg">Jahre 1980&lt;/a> wahrscheinlich gigantisch wirkten.&lt;/p>
&lt;p>• 256x192 resolution on TV screen • 15 unique colors plus transparent • General 8-bit bidirectional interface to Central Processor Unit (CPU) • Direct wiring to 4K, 8K, or 16K dynamic RAM memories • Automatic and transparent refresh of dynamic RAMs • Unique planar representation for 3D simulation • Standard 40-pin package • Color difference outputs allow RGB drive - TMS992SA/9929A&lt;/p>
&lt;p>Ok, schauen wir uns mal das &lt;a href="http://www.bitsavers.org/components/ti/TMS9900/TMS9918A_TMS9928A_TMS9929A_Video_Display_Processors_Data_Manual_Nov82.pdf">Datenblatt&lt;/a> an. Aha, oha, soso&amp;hellip;. sieht doch gar nicht so schwierig aus. Jetzt brauchen wir noch passende DRAM&amp;rsquo;s da wird&amp;rsquo;s schon schwieriger. Zum Glück hat der Dommas sowas in seiner Bastelkiste, gleich nen ganzen Sack diverser Typen. Glück gehabt&amp;hellip;. Im Datenblatt steht TMS4116, in der Bastelkiste finde ich NEC416 die sind exakt baugleich von daher pinkompatibel. Die DRAMs an den VDP zu kleben ist im Datenblatt beschrieben, ich lese mir das ganze bestimmt 50 Mal durch, hab nen Knoten im Kopf und verstehe nicht warum man das damals so kompliziert machen musste&amp;hellip; Dazu kommt, dass ich Beschaltung und Funktionsweise von DRAMs das letzte mal vor 14 Jahren gehört habe. Also lese ich mich auch hier nochmal ein.&lt;/p>
&lt;p>Für den TMS9929 brauchen wir 8 16K DRAMs, die 1Bit organisiert sind, ebend genau der 4116 Typ oder baugleich. Ich besorge mir also noch ein paar Steckbretterund jede Menge Steckbrettkabel, um das Gestrüpp herzustellen.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Fertig, ich freu mich, seh zwar noch nix bin aber zuversichtlich&amp;hellip;&lt;/p></content></item></channel></rss>