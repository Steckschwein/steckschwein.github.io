<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>steckschwein on</title><link>https://beta.steckschwein.de/categories/steckschwein/</link><description>Recent content in steckschwein on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://beta.steckschwein.de/categories/steckschwein/index.xml" rel="self" type="application/rss+xml"/><item><title>V9958 - "The WAIT" - investigation of the CPU/VDP /WAIT interface</title><link>https://beta.steckschwein.de/post/v9958-the-wait-investigation-of-the-cpu-vdp-wait-interface/</link><pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/v9958-the-wait-investigation-of-the-cpu-vdp-wait-interface/</guid><description>&amp;hellip; on the way back to munich, we had some time to do a little code review of our gfx library. thinking about the cpu to video chip timings and again read the well known datasheets of the V9938/V9958. suddenly i got an enlightenment and we came to the following conclusion.
as described in the datasheet (V9958-Technical-manual_v1.0.pdf) of the V9958 there are different timings given for different kind of writes. so as far as we understand there are the following timings</description><content>&lt;p>&amp;hellip; on the way back to munich, we had some time to do a little code review of our gfx library. thinking about the cpu to video chip timings and again read the well known datasheets of the V9938/V9958. suddenly i got an enlightenment and we came to the following conclusion.&lt;/p>
&lt;p>as described in the datasheet (V9958-Technical-manual_v1.0.pdf) of the V9958 there are different timings given for different kind of writes. so as far as we understand there are the following timings&lt;/p>
&lt;ol>
&lt;li>the first 2 bytes send to vdp during a write are always register writes which require a short delay of at least 2µs in between each byte&lt;/li>
&lt;li>the write of the 3rd byte (after the 2nd) requires a delay of 8µs. any further &amp;ldquo;single byte transfer&amp;rdquo; - during a vram write - also requires the 8µs delay. the same is true if we want to initiate a register write direclty after a vram write.&lt;/li>
&lt;li>the 3rd and n-th byte write to port #3 (index register port) during a bulk register write requires only the 2µs between each byte&lt;/li>
&lt;/ol>
&lt;p>With this in mind, we can optimize our library a little bit by using different &amp;ldquo;nop slides&amp;rdquo; for address setup and vram writes.&lt;/p>
&lt;p>We enhance our vdp.inc and built two macros which provide the different delay we need.&lt;/p>
&lt;p>.macro vdp_wait_s
jsr vdp_nopslide_2m ; 2m for 2µs wait
&amp;hellip;&lt;/p>
&lt;p>.macro vdp_wait_l
jsr vdp_nopslide_8m ; 8m for 8µs wait
&amp;hellip;&lt;/p>
&lt;p>steckSchwein is running at 8Mhz, so we also defined some equations and used ca65 macros to build our nop slides.&lt;/p>
&lt;p>.define CLOCK_SPEED_MHZ 8&lt;/p>
&lt;p>; long delay with 6µ+2µs (below)
MAX_NOPS_8M = (6 * 1000 / (1000 / CLOCK_SPEED_MHZ)) / 2
; 8Mhz, 125ns per cycle, wait 6µs = 6000ns
; = 6000ns / 125ns = 48cl / 2 =&amp;gt; 24 NOP&lt;/p>
&lt;p>; short delay with 2µs wait
MAX_NOPS_2M = (2 * 1000 / (1000 / CLOCK_SPEED_MHZ) -12) / 2
; -12 =&amp;gt; jsr/rts = 2 * 6cl = 12cl must be subtract&lt;/p>
&lt;p>.macro m_vdp_nopslide
vdp_nopslide_8m:
; long delay with 6+2 2µs wait
.repeat MAX_NOPS_8M
nop
.endrepeat
vdp_nopslide_2m:
.repeat MAX_NOPS_2M
nop
.endrepeat
rts
.endmacro&lt;/p>
&lt;p>Another interesting thing would be, &amp;ldquo;how does the /WAIT&amp;rdquo; behave in this situation? the assumption here is, that the /WAIT will behave in the way as specified. so /WAIT will be go low at least after 130ns from CSW. so to handover the /RDY handling to the vdp via the /WAIT pin, we have to apply only 1 wait state from our WS-Gen. after one wait state, we can release the /RDY low from our WS so that the vdp /WAIT can drive /RDY as needed.&lt;/p>
&lt;p>Back home, Thomas did the test and changed the waitstate generator firmware for the GAL16V8.&lt;/p>
&lt;p>The equation was&lt;/p>
&lt;p>W2 = ROM * UART * SND * /VDP
W1 = W2
+ /ROM * UART * VDP&lt;/p>
&lt;p>and was changed to&lt;/p>
&lt;p>W2 = /SND
W1 = W2
+ /ROM ; /ROM wait state if ROM is cs
+ /VDP ; /VDP wait state if VDP is cs&lt;/p>
&lt;p>So finally, we only need one wait state from the waitstate generator to access the VDP. If the VDP requires more time - surely - during a video memory access it will drive /WAIT to low as long as needed. So after the explcit 1WS from our wait state generator we now hand over the /RDY control to the VDP. How our /RDY and /WAIT really work together is subject to one of our next sessions where we&amp;rsquo;re going to measure the things with a logic analyzer and oscilloscope. Nevertheless, it works in this way and it works exaclty as specified within the datasheet.&lt;/p></content></item><item><title>VCFB 2018 It was great...</title><link>https://beta.steckschwein.de/post/vcfb-2018-its-great/</link><pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/vcfb-2018-its-great/</guid><description>VCF 2018 in Berlin was great! We&amp;rsquo;ve met interesting people there. Got a handshake with Scot W. Stevenson who for(th)ced us to use his TaliForth2 ;)
Later on Saturday Daniel Illgen - maintainer of the Adlib Tracker II for Linux - had decided to honor us with his OPL2 knowledge while on the way out. He advised us to keep the OPL2 sound chip on the Steckschwein, because the OPL2 chip is still not outbid.</description><content>&lt;p>VCF 2018 in Berlin was great! We&amp;rsquo;ve met interesting people there. Got a handshake with Scot W. Stevenson who for(th)ced us to use his &lt;a href="https://github.com/scotws/TaliForth2">TaliForth2&lt;/a> ;)&lt;/p>
&lt;p>Later on Saturday &lt;a href="http://www.adlibtracker.net/downloads.php">Daniel Illgen&lt;/a> - maintainer of the Adlib Tracker II for Linux - had decided to honor us with his OPL2 knowledge while on the way out. He advised us to keep the OPL2 sound chip on the Steckschwein, because the OPL2 chip is still not outbid. We hat doubts at first, but then we could listen to OPL2 with so called &amp;ldquo;software low frequency oscillation&amp;rdquo; (soft lfo) and the drums and bass sounds great!&lt;/p>
&lt;p>Beside the VCF there where talks about demos and the history of the demoscene then and now. There where two interesting and awesome talks given by &amp;ldquo;&lt;a href="http://svolli.de/">SvOlli&lt;/a>&amp;rdquo; about the demoscene and demo coding on the Atari VCS (Stella).&lt;/p>
&lt;p>Here are the slides of out talks and Links to the livestream from Saturday 13.10.2018.&lt;/p>
&lt;ul>
&lt;li>Steckschwein - &lt;a href="https://steckschwein.files.wordpress.com/2018/10/the-history.pdf">The history and why it&amp;rsquo;s called &amp;ldquo;Steckschwin&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>Steckschwein - &lt;a href="https://steckschwein.files.wordpress.com/2018/10/asm_tests_ci.pdf">6502 Test Driven Development and Continuous Integration&lt;/a>&lt;/li>
&lt;li>Livestream: &lt;a href="https://media.ccc.de/c/vcfb18">https://vcfb.de/2018/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Many thanks to &lt;a href="http://www.stefan-hoeltgen.de/">Dr. Stefan Höltgen&lt;/a> and his team arround the VCFB which made it possible that we could take a part on that cool event!&lt;/p></content></item><item><title>Die Spannung sinkt... alles auf 5 Volt</title><link>https://beta.steckschwein.de/post/die-spannung-sinkt-alles-auf-5-volt/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/die-spannung-sinkt-alles-auf-5-volt/</guid><description>Endlich, wir haben uns mal bemüht und pünktlich zum 17. VCF das Steckschwein auf 5V umgerüstet. Genauer gesagt war ja nur noch das Video-Board und der YPbPr auf RGB-Encoder das Problem. Der kam zwar mit 5V auch klar, jedoch war dann der Kontrast und die Farbsättigung &amp;ldquo;unterirdisch&amp;rdquo;.
Was haben wir geändert? Vorab muss man sagen, dass uns in den - mittlerweile - letzten Jahren zahlreiche Emails von Interessenten, Retro-Freaks und Bastlern ereilten.</description><content>&lt;h3 id="endlich">Endlich,&lt;/h3>
&lt;p>wir haben uns mal bemüht und pünktlich zum 17. VCF das Steckschwein auf 5V umgerüstet. Genauer gesagt war ja nur noch das Video-Board und der YPbPr auf RGB-Encoder das Problem. Der kam zwar mit 5V auch klar, jedoch war dann der Kontrast und die Farbsättigung &amp;ldquo;unterirdisch&amp;rdquo;.&lt;/p>
&lt;h3 id="was-haben-wir-geändert">Was haben wir geändert?&lt;/h3>
&lt;p>Vorab muss man sagen, dass uns in den - mittlerweile - letzten Jahren zahlreiche Emails von Interessenten, Retro-Freaks und Bastlern ereilten. Vielen Dank an dieser Stelle für Anregungen, Hinweise und das Interesse!&lt;/p>
&lt;p>Für die 5Volt &amp;ldquo;Abrüstung&amp;rdquo; des Video-Boards gab es wichtige Hinweise von C. Forstreuter, er ist hier bereits vor über einem Jahr vorausgeeilt und hat den RGB-Encoder auf 5Volt umgestellt. Dabei sind lediglich die Emitter-Widerstände &lt;strong>R4, R5, R6&lt;/strong> und &lt;strong>R15, R16, R20&lt;/strong> durch &lt;strong>470Ohm Widerstände&lt;/strong> zu ersetzen, damit der Pegel bei 5V entsprechend wieder passt. Siehe dazu &lt;a href="http://www.steckschwein.de/index.php/hardware/tms9929-video-display-processor/">Schaltplan des Video-Boards&lt;/a>.&lt;/p>
&lt;p>An dem Stecker für die 5V/12V auf dem Video-Board wird jetzt lediglich eine Drahtbücke angebracht, die die 5V Versorgung mit der ehemaligen 12V Versorgung der RGB-Stufe verbindet. Das Video-Board kann seine Spannung jetzt komplett über das Backplane-Kabel vom CPU-Board beziehen.&lt;/p>
&lt;p>&lt;strong>Jetzt,&lt;/strong>&lt;/p>
&lt;p>können wir das Schwein bequem über die &lt;strong>USB-Buchse&lt;/strong> betreiben, die von Thomas an dem neuen CPU-Board vorgesehen wurde. Das klappt wunderbar, nur noch etwas die Pegel am RGB-Encoder einstellen und alles läuft zufriedenstellend.&lt;/p>
&lt;p>&lt;strong>Nicht ganz,&lt;/strong>&lt;/p>
&lt;p>so schön sieht das Video-Signal aus wenn man das Schwein mit einer schlechten 5V Spannungsversorgung/Netzteil betreibt. Beispielsweise an meinem Notebook direkt über USB-Anschluß, da gibt es dann ein übles &amp;ldquo;Kriseln&amp;rdquo; auf dem Video-Bild. Aber klar, das Schwein zieht fast 500mA und die Notebook-USB-Buchse ist sicherlich alles andere als eine stabile 5V-Quelle. Zumal die USB 1.0-Spezifikation sogar erlaubt, dass die Versorgungsspannung bis zu 4.25V &amp;ldquo;einbrechen&amp;rdquo; kann. Derartige Schwankunngen wirken sich hier natürlich unmittelbar auf das Videosignal aus, da ja analog. Erstaunlich ist jedoch, dass das Steckschwein damit dennoch problemlos funktioniert und das bei 8Mhz!&lt;/p></content></item><item><title>Zurück vom VCFe.CH</title><link>https://beta.steckschwein.de/post/zurueck-vom-vcfe-ch/</link><pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/zurueck-vom-vcfe-ch/</guid><description>Das VCFe.CH war ein großer Spaß und wieder haben wir uns über das Interesse an unserem Projekt gefreut. Bei der Gelegenheit haben wir in einem kleinen Vortrag die letzten Fortschritte und aktuellen Stand des Steckschweins, wie es jetzt offiziell heißt, gehalten. Hier sind die Folien
Außerdem gehört uns jetzt die Domain steckschwein.de, wo in Zukunft unsere Projektwebsite entstehen soll.</description><content>&lt;p>Das VCFe.CH war ein großer Spaß und wieder haben wir uns über das Interesse an unserem Projekt gefreut. Bei der Gelegenheit haben wir in einem kleinen Vortrag die letzten Fortschritte und aktuellen Stand des Steckschweins, wie es jetzt offiziell heißt, gehalten. &lt;a href="https://drive.google.com/file/d/0B82yoNWUtYziMXdOdDYwNmZXT3M/view?usp=sharing">Hier sind die Folien&lt;/a>&lt;/p>
&lt;p>Außerdem gehört uns jetzt die Domain &lt;a href="http://steckschwein.de/">steckschwein.de&lt;/a>, wo in Zukunft unsere Projektwebsite entstehen soll.&lt;/p></content></item><item><title>Steckschwein auf dem VCFe.CH</title><link>https://beta.steckschwein.de/post/steckschwein-auf-dem-vcfe-ch/</link><pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/steckschwein-auf-dem-vcfe-ch/</guid><description>Wir sind wieder unterwegs und zeigen unsere Steckschweine herum. Am Samstag, dem 18.10. werden wir auf dem VCFe.CH in Winterthur zugegen sein, und den aktuellen Stand unseres Projekts vorstellen. Auch ein kleiner Vortrag ist geplant.
Wir freuen uns!</description><content>&lt;p>Wir sind wieder unterwegs und zeigen unsere Steckschweine herum. Am Samstag, dem 18.10. werden wir auf dem VCFe.CH in Winterthur zugegen sein, und den aktuellen Stand unseres Projekts vorstellen. Auch ein kleiner Vortrag ist geplant.&lt;/p>
&lt;p>Wir freuen uns!&lt;/p>
&lt;p>&lt;a href="http://www.vcfe.org/DATA/CH-Naechstes_Mal.jpg">&lt;img src="images/CH-Naechstes_Mal.jpg" alt="">&lt;/a>&lt;/p></content></item><item><title>Doppelt hält besser</title><link>https://beta.steckschwein.de/post/doppelt-haelt-besser/</link><pubDate>Sat, 22 Feb 2014 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/doppelt-haelt-besser/</guid><description>Damit sich ein &amp;ldquo;Steckschwein&amp;rdquo; nicht so einsam fühlt, haben wir das ganze nochmal geklont. Jetzt hat jeder sein eigenes Steckschwein und kann daran rumschrauben oder besser gesagt rumstecken.
Da wir das Tooling &amp;ldquo;leichtgewichtig&amp;rdquo; halten wollen, gabs auch gleich ein kleines Problem zu lösen. Die Dekoder-Logik für den GAL wurde bisher in VHDL definiert und mit dem Hersteller-Produkt http://www.latticesemi.com/ispleverclassic ein entsprechendes JEDEC-File erzeugt. Das war uns dann doch viel zu unhandlich und wir haben uns nach Alternativen umgetan.</description><content>&lt;p>Damit sich ein &amp;ldquo;Steckschwein&amp;rdquo; nicht so einsam fühlt, haben wir das ganze nochmal geklont. Jetzt hat jeder sein eigenes Steckschwein und kann daran rumschrauben oder besser gesagt rumstecken.&lt;/p>
&lt;p>Da wir das Tooling &amp;ldquo;leichtgewichtig&amp;rdquo; halten wollen, gabs auch gleich ein kleines Problem zu lösen. Die Dekoder-Logik für den GAL wurde bisher in VHDL definiert und mit dem Hersteller-Produkt &lt;a href="http://www.latticesemi.com/ispleverclassic">http://www.latticesemi.com/ispleverclassic&lt;/a> ein entsprechendes JEDEC-File erzeugt. Das war uns dann doch viel zu unhandlich und wir haben uns nach Alternativen umgetan. Die Wahl fiel auf &lt;a href="https://github.com/daveho/GALasm">https://github.com/daveho/GALasm&lt;/a>, ein kleines aber feines Tool mit dem aus einigen booleschen Ausdrücken für die Dekoder-Logik genauso gut ein JEDEC-File erzeugt werden kann.&lt;/p>
&lt;pre tabindex="0">&lt;code>GAL22V10    ; first line : used GAL 8Bit Dekoder   
; second line: any text (max. 8 char.)
; PIN assignment
; G1       ; A15 of 6502 (Pin 25)
A2       ; A14 of 6502 (Pin 24)
A1       ; A13 of 6502 (Pin 23)
A0       ; A12 of 6502 (Pin 22)
B0       ; A08 of 6502 (Pin 20)
B1       ; A09 of 6502 (Pin 19)
B2       ; A10 of 6502 (Pin 18)
B3       ; A11 of 6502 (Pin 17)
RW       ; RW of 6502 (Pin 34)
PHI2     ; PHI2 of 6502 (Pin 39)
NC
GND
NC
CSROM    ;CS signal for ROM at $e000-$ffff
OE
WE       ;with PHI2 synchronized WE
CSHIRAM  ;CS for ram between  $8000-$cfff
CSACIA   ;6551 ACIA   at $d000
CSVIA    ;6522 VIA    at $d100
ELCD     ;LCD-Display at $d200
VDPCSR   ;Read VDP at $d400
VDPCSW   ;Write VDP at $d400
CSUART   ;CS for UART at $d300
VCC
;
;  boolean expressions
;
OE       = /RW  ; - output enable (active low, read from adress)
/WE      = /RW * PHI2     ; - write enable, combined with PHI2 (Pin 39) for synchronisation
/CSHIRAM = G1*/A2         ; $8000-$cfff + G1\*/A1\*/A0
/CSROM   = G1*A2*A1*A0   ; $e000-$ffff + G1\*A2\*A1\*/A0
/CSACIA  = G1 * A2*/A1*A0 * /B3*/B2*/B1*/B0  ; $d000
/CSVIA   = G1 * A2*/A1*A0 * /B3*/B2*/B1*B0   ; $d100
ELCD     = PHI2 * G1 * A2*/A1*A0 * /B3*/B2*B1*/B0  ; $d200 - LCD-Display at $d200
/CSUART  = G1 * A2*/A1*A0* /B3*/B2*B1*B0           ; $d300 - UART
&lt;/code>&lt;/pre>&lt;p>Mehr ist&amp;rsquo;s dann auch nicht, ganz oben der Typ des GAL&amp;rsquo;s in dem Fall ein 10-er, d.h. 10-Input, 10-Output-Pins. Darunter das PIN-Assignment, einfach in aufsteigender Reihenfolge deklarieren, also Pin1 - G1, Pin2 A2 usw.. bis VCC Pin 24. Dann noch die Boolschen-Ausdrücke, wobei * ein AND darstellt und + ein logisches OR. Negation mit /. Compiler anwerfen mittels.&lt;/p>
&lt;p>Jetzt noch das ganze auf den GAL brutzeln, am besten mit dem Universal programmer TL866C und schon läuft&amp;rsquo;s.&lt;/p></content></item></channel></rss>