<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>65c02 on</title><link>https://beta.steckschwein.de/categories/65c02/</link><description>Recent content in 65c02 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 21 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://beta.steckschwein.de/categories/65c02/index.xml" rel="self" type="application/rss+xml"/><item><title>Chuck Peddle, 1937 - 2019</title><link>https://beta.steckschwein.de/post/chuck-peddle-1937-2019/</link><pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/chuck-peddle-1937-2019/</guid><description>Chuck Peddle, the main designer of the 6502, has passed away on Dec. 15th, 2019.
Peddle was one of the engineers that developed the 6800 at Motorola. He later went to MOS in order to implement his vision of an 8bit CPU for way less than $300, which was Motorola&amp;rsquo;s price for the 6800.
This idea of a cheap but powerful CPU materialized as the 6501, and finally the 6502. That very chip, which started the microcomputer revolution, and on which both Marko and myself began to write our first code ever at an early age.</description><content>&lt;p>Chuck Peddle, the main designer of the 6502, has passed away on Dec. 15th, 2019.&lt;/p>
&lt;p>Peddle was one of the engineers that developed the 6800 at Motorola. He later went to MOS in order to implement his vision of an 8bit CPU for way less than $300, which was Motorola&amp;rsquo;s price for the 6800.&lt;/p>
&lt;p>This idea of a cheap but powerful CPU materialized as the 6501, and finally the 6502. That very chip, which started the microcomputer revolution, and on which both Marko and myself began to write our first code ever at an early age. BASIC at first, followed by assembly language later.&lt;/p>
&lt;p>Learning to code assembly on this small and elegant CPU provided the both of us with profound knowledge and experience about the inner workings of a computer. Knowledge which is still valuable in our respective careers in IT, and also of course when working on our pet project, the Steckschwein. Things would have gone quite different without Chuck Peddle&amp;rsquo;s elegant little CPU.&lt;/p>
&lt;p>Thanks, Chuck!&lt;/p></content></item><item><title>V9958 - "The WAIT" - investigation of the CPU/VDP /WAIT interface</title><link>https://beta.steckschwein.de/post/v9958-the-wait-investigation-of-the-cpu-vdp-wait-interface/</link><pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/v9958-the-wait-investigation-of-the-cpu-vdp-wait-interface/</guid><description>&amp;hellip; on the way back to munich, we had some time to do a little code review of our gfx library. thinking about the cpu to video chip timings and again read the well known datasheets of the V9938/V9958. suddenly i got an enlightenment and we came to the following conclusion.
as described in the datasheet (V9958-Technical-manual_v1.0.pdf) of the V9958 there are different timings given for different kind of writes. so as far as we understand there are the following timings</description><content>&lt;p>&amp;hellip; on the way back to munich, we had some time to do a little code review of our gfx library. thinking about the cpu to video chip timings and again read the well known datasheets of the V9938/V9958. suddenly i got an enlightenment and we came to the following conclusion.&lt;/p>
&lt;p>as described in the datasheet (V9958-Technical-manual_v1.0.pdf) of the V9958 there are different timings given for different kind of writes. so as far as we understand there are the following timings&lt;/p>
&lt;ol>
&lt;li>the first 2 bytes send to vdp during a write are always register writes which require a short delay of at least 2µs in between each byte&lt;/li>
&lt;li>the write of the 3rd byte (after the 2nd) requires a delay of 8µs. any further &amp;ldquo;single byte transfer&amp;rdquo; - during a vram write - also requires the 8µs delay. the same is true if we want to initiate a register write direclty after a vram write.&lt;/li>
&lt;li>the 3rd and n-th byte write to port #3 (index register port) during a bulk register write requires only the 2µs between each byte&lt;/li>
&lt;/ol>
&lt;p>With this in mind, we can optimize our library a little bit by using different &amp;ldquo;nop slides&amp;rdquo; for address setup and vram writes.&lt;/p>
&lt;p>We enhance our vdp.inc and built two macros which provide the different delay we need.&lt;/p>
&lt;p>.macro vdp_wait_s
jsr vdp_nopslide_2m ; 2m for 2µs wait
&amp;hellip;&lt;/p>
&lt;p>.macro vdp_wait_l
jsr vdp_nopslide_8m ; 8m for 8µs wait
&amp;hellip;&lt;/p>
&lt;p>steckSchwein is running at 8Mhz, so we also defined some equations and used ca65 macros to build our nop slides.&lt;/p>
&lt;p>.define CLOCK_SPEED_MHZ 8&lt;/p>
&lt;p>; long delay with 6µ+2µs (below)
MAX_NOPS_8M = (6 * 1000 / (1000 / CLOCK_SPEED_MHZ)) / 2
; 8Mhz, 125ns per cycle, wait 6µs = 6000ns
; = 6000ns / 125ns = 48cl / 2 =&amp;gt; 24 NOP&lt;/p>
&lt;p>; short delay with 2µs wait
MAX_NOPS_2M = (2 * 1000 / (1000 / CLOCK_SPEED_MHZ) -12) / 2
; -12 =&amp;gt; jsr/rts = 2 * 6cl = 12cl must be subtract&lt;/p>
&lt;p>.macro m_vdp_nopslide
vdp_nopslide_8m:
; long delay with 6+2 2µs wait
.repeat MAX_NOPS_8M
nop
.endrepeat
vdp_nopslide_2m:
.repeat MAX_NOPS_2M
nop
.endrepeat
rts
.endmacro&lt;/p>
&lt;p>Another interesting thing would be, &amp;ldquo;how does the /WAIT&amp;rdquo; behave in this situation? the assumption here is, that the /WAIT will behave in the way as specified. so /WAIT will be go low at least after 130ns from CSW. so to handover the /RDY handling to the vdp via the /WAIT pin, we have to apply only 1 wait state from our WS-Gen. after one wait state, we can release the /RDY low from our WS so that the vdp /WAIT can drive /RDY as needed.&lt;/p>
&lt;p>Back home, Thomas did the test and changed the waitstate generator firmware for the GAL16V8.&lt;/p>
&lt;p>The equation was&lt;/p>
&lt;p>W2 = ROM * UART * SND * /VDP
W1 = W2
+ /ROM * UART * VDP&lt;/p>
&lt;p>and was changed to&lt;/p>
&lt;p>W2 = /SND
W1 = W2
+ /ROM ; /ROM wait state if ROM is cs
+ /VDP ; /VDP wait state if VDP is cs&lt;/p>
&lt;p>So finally, we only need one wait state from the waitstate generator to access the VDP. If the VDP requires more time - surely - during a video memory access it will drive /WAIT to low as long as needed. So after the explcit 1WS from our wait state generator we now hand over the /RDY control to the VDP. How our /RDY and /WAIT really work together is subject to one of our next sessions where we&amp;rsquo;re going to measure the things with a logic analyzer and oscilloscope. Nevertheless, it works in this way and it works exaclty as specified within the datasheet.&lt;/p></content></item><item><title>TMS9929 - Wir wollen was sehen...</title><link>https://beta.steckschwein.de/post/tms9929-wir-wollen-was-sehen/</link><pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate><guid>https://beta.steckschwein.de/post/tms9929-wir-wollen-was-sehen/</guid><description>&amp;hellip; und zwar auf einem Bildschirm! Aber wie stellt man sowas an?! Nun, wir schauen uns um, was Ende der 70-er bzw. Anfang der 80-er Jahre Stand der Technik war und was sich mit überschaubarem Aufwand an eine 6502 CPU &amp;ldquo;anschließen&amp;rdquo; lässt. Die Auswahl ist leider überschaubar, denn es sollte irgendwas in DIP maximal noch SDIP sein und dazu noch irgendwie lieferbar - &amp;ldquo;new old stock&amp;rdquo;.
Wir fanden die TMS9918/28/29-Serie und einige Nachfolger wie den TMS9938/58.</description><content>&lt;p>&amp;hellip; und zwar auf einem Bildschirm! Aber wie stellt man sowas an?! Nun, wir schauen uns um, was Ende der 70-er bzw. Anfang der 80-er Jahre Stand der Technik war und was sich mit überschaubarem Aufwand an eine 6502 CPU &amp;ldquo;anschließen&amp;rdquo; lässt. Die Auswahl ist leider überschaubar, denn es sollte irgendwas in DIP maximal noch SDIP sein und dazu noch irgendwie lieferbar - &amp;ldquo;new old stock&amp;rdquo;.&lt;/p>
&lt;p>Wir fanden die TMS9918/28/29-Serie und einige Nachfolger wie den TMS9938/58. Für&amp;rsquo;s erste sollte es ein TMS9929 sein, weil der tatächlich noch zu beschaffen ist und dazu auch noch im DIP-Gehäuse daherkommt. Der -29 ist für den europäischen Markt gebaut worden, um diese an PAL-Fernsehgeräte anschließen zu können. Hier eine kleiner Auszug  der technischen Fähigkeiten, die im &lt;a href="http://msx.hansotten.com/uploads/ffiles/1980%20TMS9918%20Advertisement.jpg">Jahre 1980&lt;/a> wahrscheinlich gigantisch wirkten.&lt;/p>
&lt;p>• 256x192 resolution on TV screen • 15 unique colors plus transparent • General 8-bit bidirectional interface to Central Processor Unit (CPU) • Direct wiring to 4K, 8K, or 16K dynamic RAM memories • Automatic and transparent refresh of dynamic RAMs • Unique planar representation for 3D simulation • Standard 40-pin package • Color difference outputs allow RGB drive - TMS992SA/9929A&lt;/p>
&lt;p>Ok, schauen wir uns mal das &lt;a href="http://www.bitsavers.org/components/ti/TMS9900/TMS9918A_TMS9928A_TMS9929A_Video_Display_Processors_Data_Manual_Nov82.pdf">Datenblatt&lt;/a> an. Aha, oha, soso&amp;hellip;. sieht doch gar nicht so schwierig aus. Jetzt brauchen wir noch passende DRAM&amp;rsquo;s da wird&amp;rsquo;s schon schwieriger. Zum Glück hat der Dommas sowas in seiner Bastelkiste, gleich nen ganzen Sack diverser Typen. Glück gehabt&amp;hellip;. Im Datenblatt steht TMS4116, in der Bastelkiste finde ich NEC416 die sind exakt baugleich von daher pinkompatibel. Die DRAMs an den VDP zu kleben ist im Datenblatt beschrieben, ich lese mir das ganze bestimmt 50 Mal durch, hab nen Knoten im Kopf und verstehe nicht warum man das damals so kompliziert machen musste&amp;hellip; Dazu kommt, dass ich Beschaltung und Funktionsweise von DRAMs das letzte mal vor 14 Jahren gehört habe. Also lese ich mich auch hier nochmal ein.&lt;/p>
&lt;p>Für den TMS9929 brauchen wir 8 16K DRAMs, die 1Bit organisiert sind, ebend genau der 4116 Typ oder baugleich. Ich besorge mir also noch ein paar Steckbretterund jede Menge Steckbrettkabel, um das Gestrüpp herzustellen.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Fertig, ich freu mich, seh zwar noch nix bin aber zuversichtlich&amp;hellip;&lt;/p></content></item></channel></rss>